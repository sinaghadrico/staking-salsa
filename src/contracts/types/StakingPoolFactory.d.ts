/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
    ethers,
    EventFilter,
    Signer,
    BigNumber,
    BigNumberish,
    PopulatedTransaction,
    Contract,
    ContractTransaction,
    Overrides,
    CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface StakingPoolFactoryInterface extends ethers.utils.Interface {
    functions: {
        "addPoolCreator(address)": FunctionFragment;
        "createPoolProxy(address,address,string,string,uint256[11],uint256[8],uint256[8],bool)": FunctionFragment;
        "isPoolCreator(address)": FunctionFragment;
        "minimumStakeAmount()": FunctionFragment;
        "renouncePoolCreator()": FunctionFragment;
        "rewardManager()": FunctionFragment;
        "setDefaultTaxRate(uint256)": FunctionFragment;
        "setNewStakingPoolImplementationAdr(address)": FunctionFragment;
        "setNewSuperAdmin(address)": FunctionFragment;
        "setSwapRouter(address)": FunctionFragment;
        "stakingPoolImplementationAdr()": FunctionFragment;
        "stakingPoolTaxRate()": FunctionFragment;
        "superAdmin()": FunctionFragment;
        "swapRouter()": FunctionFragment;
        "totemToken()": FunctionFragment;
        "usdToken()": FunctionFragment;
    };

    encodeFunctionData(functionFragment: "addPoolCreator", values: [string]): string;
    encodeFunctionData(
        functionFragment: "createPoolProxy",
        values: [
            string,
            string,
            string,
            string,
            [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
            ],
            [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
            ],
            [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
            ],
            boolean,
        ],
    ): string;
    encodeFunctionData(functionFragment: "isPoolCreator", values: [string]): string;
    encodeFunctionData(functionFragment: "minimumStakeAmount", values?: undefined): string;
    encodeFunctionData(functionFragment: "renouncePoolCreator", values?: undefined): string;
    encodeFunctionData(functionFragment: "rewardManager", values?: undefined): string;
    encodeFunctionData(functionFragment: "setDefaultTaxRate", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setNewStakingPoolImplementationAdr", values: [string]): string;
    encodeFunctionData(functionFragment: "setNewSuperAdmin", values: [string]): string;
    encodeFunctionData(functionFragment: "setSwapRouter", values: [string]): string;
    encodeFunctionData(functionFragment: "stakingPoolImplementationAdr", values?: undefined): string;
    encodeFunctionData(functionFragment: "stakingPoolTaxRate", values?: undefined): string;
    encodeFunctionData(functionFragment: "superAdmin", values?: undefined): string;
    encodeFunctionData(functionFragment: "swapRouter", values?: undefined): string;
    encodeFunctionData(functionFragment: "totemToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "usdToken", values?: undefined): string;

    decodeFunctionResult(functionFragment: "addPoolCreator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "createPoolProxy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isPoolCreator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "minimumStakeAmount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renouncePoolCreator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rewardManager", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultTaxRate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setNewStakingPoolImplementationAdr", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setNewSuperAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSwapRouter", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stakingPoolImplementationAdr", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stakingPoolTaxRate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "superAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totemToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "usdToken", data: BytesLike): Result;

    events: {
        "NewStakingPoolImplemnetationWasSet()": EventFragment;
        "NewSuperAdminWasSet()": EventFragment;
        "PoolCreated(address,string,string,uint256[11],uint256[8],uint256[8],bool)": EventFragment;
        "PoolCreatorAdded(address)": EventFragment;
        "PoolCreatorRemoved(address)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "NewStakingPoolImplemnetationWasSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NewSuperAdminWasSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PoolCreated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PoolCreatorAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PoolCreatorRemoved"): EventFragment;
}

export class StakingPoolFactory extends Contract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    listeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
    ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
    off<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    on<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    once<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    ): this;

    listeners(eventName?: string): Array<Listener>;
    off(eventName: string, listener: Listener): this;
    on(eventName: string, listener: Listener): this;
    once(eventName: string, listener: Listener): this;
    removeListener(eventName: string, listener: Listener): this;
    removeAllListeners(eventName?: string): this;

    queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
        event: TypedEventFilter<EventArgsArray, EventArgsObject>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined,
    ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

    interface: StakingPoolFactoryInterface;

    functions: {
        addPoolCreator(
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "addPoolCreator(address)"(
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        createPoolProxy(
            _oracleContract: string,
            _wrappedTokenContract: string,
            _wrappedTokenSymbol: string,
            _poolType: string,
            _variables: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
            ],
            _ranks: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
            ],
            _percentages: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
            ],
            isEnhancedEnabled: boolean,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "createPoolProxy(address,address,string,string,uint256[11],uint256[8],uint256[8],bool)"(
            _oracleContract: string,
            _wrappedTokenContract: string,
            _wrappedTokenSymbol: string,
            _poolType: string,
            _variables: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
            ],
            _ranks: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
            ],
            _percentages: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
            ],
            isEnhancedEnabled: boolean,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        isPoolCreator(account: string, overrides?: CallOverrides): Promise<[boolean]>;

        "isPoolCreator(address)"(account: string, overrides?: CallOverrides): Promise<[boolean]>;

        minimumStakeAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

        "minimumStakeAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        renouncePoolCreator(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        "renouncePoolCreator()"(
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        rewardManager(overrides?: CallOverrides): Promise<[string]>;

        "rewardManager()"(overrides?: CallOverrides): Promise<[string]>;

        setDefaultTaxRate(
            newStakingPoolTaxRate: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "setDefaultTaxRate(uint256)"(
            newStakingPoolTaxRate: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        setNewStakingPoolImplementationAdr(
            _ImpAdr: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "setNewStakingPoolImplementationAdr(address)"(
            _ImpAdr: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        setNewSuperAdmin(
            _superAdmin: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "setNewSuperAdmin(address)"(
            _superAdmin: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        setSwapRouter(
            _swapRouter: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "setSwapRouter(address)"(
            _swapRouter: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        stakingPoolImplementationAdr(overrides?: CallOverrides): Promise<[string]>;

        "stakingPoolImplementationAdr()"(overrides?: CallOverrides): Promise<[string]>;

        stakingPoolTaxRate(overrides?: CallOverrides): Promise<[BigNumber]>;

        "stakingPoolTaxRate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        superAdmin(overrides?: CallOverrides): Promise<[string]>;

        "superAdmin()"(overrides?: CallOverrides): Promise<[string]>;

        swapRouter(overrides?: CallOverrides): Promise<[string]>;

        "swapRouter()"(overrides?: CallOverrides): Promise<[string]>;

        totemToken(overrides?: CallOverrides): Promise<[string]>;

        "totemToken()"(overrides?: CallOverrides): Promise<[string]>;

        usdToken(overrides?: CallOverrides): Promise<[string]>;

        "usdToken()"(overrides?: CallOverrides): Promise<[string]>;
    };

    addPoolCreator(
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "addPoolCreator(address)"(
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    createPoolProxy(
        _oracleContract: string,
        _wrappedTokenContract: string,
        _wrappedTokenSymbol: string,
        _poolType: string,
        _variables: [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
        ],
        _ranks: [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
        ],
        _percentages: [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
        ],
        isEnhancedEnabled: boolean,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "createPoolProxy(address,address,string,string,uint256[11],uint256[8],uint256[8],bool)"(
        _oracleContract: string,
        _wrappedTokenContract: string,
        _wrappedTokenSymbol: string,
        _poolType: string,
        _variables: [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
        ],
        _ranks: [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
        ],
        _percentages: [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
        ],
        isEnhancedEnabled: boolean,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    isPoolCreator(account: string, overrides?: CallOverrides): Promise<boolean>;

    "isPoolCreator(address)"(account: string, overrides?: CallOverrides): Promise<boolean>;

    minimumStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumStakeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    renouncePoolCreator(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    "renouncePoolCreator()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    rewardManager(overrides?: CallOverrides): Promise<string>;

    "rewardManager()"(overrides?: CallOverrides): Promise<string>;

    setDefaultTaxRate(
        newStakingPoolTaxRate: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "setDefaultTaxRate(uint256)"(
        newStakingPoolTaxRate: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setNewStakingPoolImplementationAdr(
        _ImpAdr: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "setNewStakingPoolImplementationAdr(address)"(
        _ImpAdr: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setNewSuperAdmin(
        _superAdmin: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "setNewSuperAdmin(address)"(
        _superAdmin: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setSwapRouter(
        _swapRouter: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "setSwapRouter(address)"(
        _swapRouter: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    stakingPoolImplementationAdr(overrides?: CallOverrides): Promise<string>;

    "stakingPoolImplementationAdr()"(overrides?: CallOverrides): Promise<string>;

    stakingPoolTaxRate(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingPoolTaxRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    superAdmin(overrides?: CallOverrides): Promise<string>;

    "superAdmin()"(overrides?: CallOverrides): Promise<string>;

    swapRouter(overrides?: CallOverrides): Promise<string>;

    "swapRouter()"(overrides?: CallOverrides): Promise<string>;

    totemToken(overrides?: CallOverrides): Promise<string>;

    "totemToken()"(overrides?: CallOverrides): Promise<string>;

    usdToken(overrides?: CallOverrides): Promise<string>;

    "usdToken()"(overrides?: CallOverrides): Promise<string>;

    callStatic: {
        addPoolCreator(account: string, overrides?: CallOverrides): Promise<void>;

        "addPoolCreator(address)"(account: string, overrides?: CallOverrides): Promise<void>;

        createPoolProxy(
            _oracleContract: string,
            _wrappedTokenContract: string,
            _wrappedTokenSymbol: string,
            _poolType: string,
            _variables: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
            ],
            _ranks: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
            ],
            _percentages: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
            ],
            isEnhancedEnabled: boolean,
            overrides?: CallOverrides,
        ): Promise<string>;

        "createPoolProxy(address,address,string,string,uint256[11],uint256[8],uint256[8],bool)"(
            _oracleContract: string,
            _wrappedTokenContract: string,
            _wrappedTokenSymbol: string,
            _poolType: string,
            _variables: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
            ],
            _ranks: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
            ],
            _percentages: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
            ],
            isEnhancedEnabled: boolean,
            overrides?: CallOverrides,
        ): Promise<string>;

        isPoolCreator(account: string, overrides?: CallOverrides): Promise<boolean>;

        "isPoolCreator(address)"(account: string, overrides?: CallOverrides): Promise<boolean>;

        minimumStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

        "minimumStakeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

        renouncePoolCreator(overrides?: CallOverrides): Promise<void>;

        "renouncePoolCreator()"(overrides?: CallOverrides): Promise<void>;

        rewardManager(overrides?: CallOverrides): Promise<string>;

        "rewardManager()"(overrides?: CallOverrides): Promise<string>;

        setDefaultTaxRate(newStakingPoolTaxRate: BigNumberish, overrides?: CallOverrides): Promise<void>;

        "setDefaultTaxRate(uint256)"(newStakingPoolTaxRate: BigNumberish, overrides?: CallOverrides): Promise<void>;

        setNewStakingPoolImplementationAdr(_ImpAdr: string, overrides?: CallOverrides): Promise<void>;

        "setNewStakingPoolImplementationAdr(address)"(_ImpAdr: string, overrides?: CallOverrides): Promise<void>;

        setNewSuperAdmin(_superAdmin: string, overrides?: CallOverrides): Promise<void>;

        "setNewSuperAdmin(address)"(_superAdmin: string, overrides?: CallOverrides): Promise<void>;

        setSwapRouter(_swapRouter: string, overrides?: CallOverrides): Promise<void>;

        "setSwapRouter(address)"(_swapRouter: string, overrides?: CallOverrides): Promise<void>;

        stakingPoolImplementationAdr(overrides?: CallOverrides): Promise<string>;

        "stakingPoolImplementationAdr()"(overrides?: CallOverrides): Promise<string>;

        stakingPoolTaxRate(overrides?: CallOverrides): Promise<BigNumber>;

        "stakingPoolTaxRate()"(overrides?: CallOverrides): Promise<BigNumber>;

        superAdmin(overrides?: CallOverrides): Promise<string>;

        "superAdmin()"(overrides?: CallOverrides): Promise<string>;

        swapRouter(overrides?: CallOverrides): Promise<string>;

        "swapRouter()"(overrides?: CallOverrides): Promise<string>;

        totemToken(overrides?: CallOverrides): Promise<string>;

        "totemToken()"(overrides?: CallOverrides): Promise<string>;

        usdToken(overrides?: CallOverrides): Promise<string>;

        "usdToken()"(overrides?: CallOverrides): Promise<string>;
    };

    filters: {
        NewStakingPoolImplemnetationWasSet(): TypedEventFilter<[], {}>;

        NewSuperAdminWasSet(): TypedEventFilter<[], {}>;

        PoolCreated(
            pool: string | null,
            wrappedTokenSymbol: null,
            poolType: null,
            variables: null,
            ranks: null,
            percentages: null,
            isEnhancedEnabled: null,
        ): TypedEventFilter<
            [
                string,
                string,
                string,
                [
                    BigNumber,
                    BigNumber,
                    BigNumber,
                    BigNumber,
                    BigNumber,
                    BigNumber,
                    BigNumber,
                    BigNumber,
                    BigNumber,
                    BigNumber,
                    BigNumber,
                ],
                [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
                [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
                boolean,
            ],
            {
                pool: string;
                wrappedTokenSymbol: string;
                poolType: string;
                variables: [
                    BigNumber,
                    BigNumber,
                    BigNumber,
                    BigNumber,
                    BigNumber,
                    BigNumber,
                    BigNumber,
                    BigNumber,
                    BigNumber,
                    BigNumber,
                    BigNumber,
                ];
                ranks: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
                percentages: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
                isEnhancedEnabled: boolean;
            }
        >;

        PoolCreatorAdded(account: string | null): TypedEventFilter<[string], { account: string }>;

        PoolCreatorRemoved(account: string | null): TypedEventFilter<[string], { account: string }>;
    };

    estimateGas: {
        addPoolCreator(
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "addPoolCreator(address)"(
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        createPoolProxy(
            _oracleContract: string,
            _wrappedTokenContract: string,
            _wrappedTokenSymbol: string,
            _poolType: string,
            _variables: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
            ],
            _ranks: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
            ],
            _percentages: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
            ],
            isEnhancedEnabled: boolean,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "createPoolProxy(address,address,string,string,uint256[11],uint256[8],uint256[8],bool)"(
            _oracleContract: string,
            _wrappedTokenContract: string,
            _wrappedTokenSymbol: string,
            _poolType: string,
            _variables: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
            ],
            _ranks: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
            ],
            _percentages: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
            ],
            isEnhancedEnabled: boolean,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        isPoolCreator(account: string, overrides?: CallOverrides): Promise<BigNumber>;

        "isPoolCreator(address)"(account: string, overrides?: CallOverrides): Promise<BigNumber>;

        minimumStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

        "minimumStakeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

        renouncePoolCreator(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        "renouncePoolCreator()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        rewardManager(overrides?: CallOverrides): Promise<BigNumber>;

        "rewardManager()"(overrides?: CallOverrides): Promise<BigNumber>;

        setDefaultTaxRate(
            newStakingPoolTaxRate: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "setDefaultTaxRate(uint256)"(
            newStakingPoolTaxRate: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        setNewStakingPoolImplementationAdr(
            _ImpAdr: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "setNewStakingPoolImplementationAdr(address)"(
            _ImpAdr: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        setNewSuperAdmin(
            _superAdmin: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "setNewSuperAdmin(address)"(
            _superAdmin: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        setSwapRouter(
            _swapRouter: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "setSwapRouter(address)"(
            _swapRouter: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        stakingPoolImplementationAdr(overrides?: CallOverrides): Promise<BigNumber>;

        "stakingPoolImplementationAdr()"(overrides?: CallOverrides): Promise<BigNumber>;

        stakingPoolTaxRate(overrides?: CallOverrides): Promise<BigNumber>;

        "stakingPoolTaxRate()"(overrides?: CallOverrides): Promise<BigNumber>;

        superAdmin(overrides?: CallOverrides): Promise<BigNumber>;

        "superAdmin()"(overrides?: CallOverrides): Promise<BigNumber>;

        swapRouter(overrides?: CallOverrides): Promise<BigNumber>;

        "swapRouter()"(overrides?: CallOverrides): Promise<BigNumber>;

        totemToken(overrides?: CallOverrides): Promise<BigNumber>;

        "totemToken()"(overrides?: CallOverrides): Promise<BigNumber>;

        usdToken(overrides?: CallOverrides): Promise<BigNumber>;

        "usdToken()"(overrides?: CallOverrides): Promise<BigNumber>;
    };

    populateTransaction: {
        addPoolCreator(
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "addPoolCreator(address)"(
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        createPoolProxy(
            _oracleContract: string,
            _wrappedTokenContract: string,
            _wrappedTokenSymbol: string,
            _poolType: string,
            _variables: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
            ],
            _ranks: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
            ],
            _percentages: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
            ],
            isEnhancedEnabled: boolean,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "createPoolProxy(address,address,string,string,uint256[11],uint256[8],uint256[8],bool)"(
            _oracleContract: string,
            _wrappedTokenContract: string,
            _wrappedTokenSymbol: string,
            _poolType: string,
            _variables: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
            ],
            _ranks: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
            ],
            _percentages: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
            ],
            isEnhancedEnabled: boolean,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        isPoolCreator(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "isPoolCreator(address)"(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        minimumStakeAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "minimumStakeAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        renouncePoolCreator(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        "renouncePoolCreator()"(
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        rewardManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "rewardManager()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        setDefaultTaxRate(
            newStakingPoolTaxRate: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "setDefaultTaxRate(uint256)"(
            newStakingPoolTaxRate: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        setNewStakingPoolImplementationAdr(
            _ImpAdr: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "setNewStakingPoolImplementationAdr(address)"(
            _ImpAdr: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        setNewSuperAdmin(
            _superAdmin: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "setNewSuperAdmin(address)"(
            _superAdmin: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        setSwapRouter(
            _swapRouter: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "setSwapRouter(address)"(
            _swapRouter: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        stakingPoolImplementationAdr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "stakingPoolImplementationAdr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        stakingPoolTaxRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "stakingPoolTaxRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        superAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "superAdmin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        swapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "swapRouter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        totemToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "totemToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        usdToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "usdToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
