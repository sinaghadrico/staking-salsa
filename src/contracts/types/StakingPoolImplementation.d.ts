/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
    ethers,
    EventFilter,
    Signer,
    BigNumber,
    BigNumberish,
    PopulatedTransaction,
    Contract,
    ContractTransaction,
    Overrides,
    CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface StakingPoolImplementationInterface extends ethers.utils.Interface {
    functions: {
        "__PriceConsumer_initialize(address)": FunctionFragment;
        "__WrappedTokenDistributor_initialize(address,address,address)": FunctionFragment;
        "claimReward()": FunctionFragment;
        "collaborativeRange()": FunctionFragment;
        "collaborativeReward()": FunctionFragment;
        "declareEmergency()": FunctionFragment;
        "deletePool()": FunctionFragment;
        "emergentWithdraw()": FunctionFragment;
        "endPool()": FunctionFragment;
        "getAveragePricePrediction()": FunctionFragment;
        "getDecimals()": FunctionFragment;
        "getDifference(uint256,uint256)": FunctionFragment;
        "getEstimatedWrappedTokenForUSD(uint256)": FunctionFragment;
        "getIndexedPrize(address,uint256)": FunctionFragment;
        "getIndexedStakingReward(address,uint256)": FunctionFragment;
        "getLatestPrice()": FunctionFragment;
        "getPathForUSDToWrappedToken()": FunctionFragment;
        "getPrize(address)": FunctionFragment;
        "getStakers()": FunctionFragment;
        "getStakingReward(address)": FunctionFragment;
        "getStakingTax(uint256,uint256)": FunctionFragment;
        "getUSDBalance()": FunctionFragment;
        "getUSDToken()": FunctionFragment;
        "getWrappedTokenBalance()": FunctionFragment;
        "getswapRouter()": FunctionFragment;
        "hasUnStaked(address,uint256)": FunctionFragment;
        "indexedClaimReward(uint256)": FunctionFragment;
        "isActive()": FunctionFragment;
        "isAnEmergency()": FunctionFragment;
        "isDeleted()": FunctionFragment;
        "isEnhancedEnabled()": FunctionFragment;
        "isLocked()": FunctionFragment;
        "isMatured()": FunctionFragment;
        "launchDate()": FunctionFragment;
        "lockPool()": FunctionFragment;
        "lockTime()": FunctionFragment;
        "lps()": FunctionFragment;
        "maturingPrice()": FunctionFragment;
        "maturityTime()": FunctionFragment;
        "minimumStakeAmount()": FunctionFragment;
        "oracleContract()": FunctionFragment;
        "oracleDecimal()": FunctionFragment;
        "owner()": FunctionFragment;
        "poolCreator()": FunctionFragment;
        "poolType()": FunctionFragment;
        "potentialCollabReward()": FunctionFragment;
        "predictions(address,uint256)": FunctionFragment;
        "prizeAmount()": FunctionFragment;
        "prizeRewardRates(uint256)": FunctionFragment;
        "purchaseWrappedToken(uint256,uint256)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "rewardManager()": FunctionFragment;
        "setActivationStatus(bool)": FunctionFragment;
        "setOracleToZero()": FunctionFragment;
        "setSortedStakers(address[25],uint256[25])": FunctionFragment;
        "sizeAllocation()": FunctionFragment;
        "sizeLimitRangeRate()": FunctionFragment;
        "sortedStakers(uint256)": FunctionFragment;
        "stake(uint256,uint256)": FunctionFragment;
        "stakeApr()": FunctionFragment;
        "stakeTaxRate()": FunctionFragment;
        "stakers(uint256)": FunctionFragment;
        "stakingPoolImplementation()": FunctionFragment;
        "totalStaked()": FunctionFragment;
        "totemToken()": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "updateMaturingPrice(uint256)": FunctionFragment;
        "upgradeEnabled()": FunctionFragment;
        "usdPrizeAmount()": FunctionFragment;
        "withdrawStuckTokens(address,uint256,address)": FunctionFragment;
        "wrappedToken()": FunctionFragment;
        "wrappedTokenSymbol()": FunctionFragment;
    };

    encodeFunctionData(functionFragment: "__PriceConsumer_initialize", values: [string]): string;
    encodeFunctionData(
        functionFragment: "__WrappedTokenDistributor_initialize",
        values: [string, string, string],
    ): string;
    encodeFunctionData(functionFragment: "claimReward", values?: undefined): string;
    encodeFunctionData(functionFragment: "collaborativeRange", values?: undefined): string;
    encodeFunctionData(functionFragment: "collaborativeReward", values?: undefined): string;
    encodeFunctionData(functionFragment: "declareEmergency", values?: undefined): string;
    encodeFunctionData(functionFragment: "deletePool", values?: undefined): string;
    encodeFunctionData(functionFragment: "emergentWithdraw", values?: undefined): string;
    encodeFunctionData(functionFragment: "endPool", values?: undefined): string;
    encodeFunctionData(functionFragment: "getAveragePricePrediction", values?: undefined): string;
    encodeFunctionData(functionFragment: "getDecimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "getDifference", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getEstimatedWrappedTokenForUSD", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getIndexedPrize", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getIndexedStakingReward", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getLatestPrice", values?: undefined): string;
    encodeFunctionData(functionFragment: "getPathForUSDToWrappedToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "getPrize", values: [string]): string;
    encodeFunctionData(functionFragment: "getStakers", values?: undefined): string;
    encodeFunctionData(functionFragment: "getStakingReward", values: [string]): string;
    encodeFunctionData(functionFragment: "getStakingTax", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getUSDBalance", values?: undefined): string;
    encodeFunctionData(functionFragment: "getUSDToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "getWrappedTokenBalance", values?: undefined): string;
    encodeFunctionData(functionFragment: "getswapRouter", values?: undefined): string;
    encodeFunctionData(functionFragment: "hasUnStaked", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "indexedClaimReward", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
    encodeFunctionData(functionFragment: "isAnEmergency", values?: undefined): string;
    encodeFunctionData(functionFragment: "isDeleted", values?: undefined): string;
    encodeFunctionData(functionFragment: "isEnhancedEnabled", values?: undefined): string;
    encodeFunctionData(functionFragment: "isLocked", values?: undefined): string;
    encodeFunctionData(functionFragment: "isMatured", values?: undefined): string;
    encodeFunctionData(functionFragment: "launchDate", values?: undefined): string;
    encodeFunctionData(functionFragment: "lockPool", values?: undefined): string;
    encodeFunctionData(functionFragment: "lockTime", values?: undefined): string;
    encodeFunctionData(functionFragment: "lps", values?: undefined): string;
    encodeFunctionData(functionFragment: "maturingPrice", values?: undefined): string;
    encodeFunctionData(functionFragment: "maturityTime", values?: undefined): string;
    encodeFunctionData(functionFragment: "minimumStakeAmount", values?: undefined): string;
    encodeFunctionData(functionFragment: "oracleContract", values?: undefined): string;
    encodeFunctionData(functionFragment: "oracleDecimal", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "poolCreator", values?: undefined): string;
    encodeFunctionData(functionFragment: "poolType", values?: undefined): string;
    encodeFunctionData(functionFragment: "potentialCollabReward", values?: undefined): string;
    encodeFunctionData(functionFragment: "predictions", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "prizeAmount", values?: undefined): string;
    encodeFunctionData(functionFragment: "prizeRewardRates", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "purchaseWrappedToken", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "rewardManager", values?: undefined): string;
    encodeFunctionData(functionFragment: "setActivationStatus", values: [boolean]): string;
    encodeFunctionData(functionFragment: "setOracleToZero", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "setSortedStakers",
        values: [
            [
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
            ],
            [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
            ],
        ],
    ): string;
    encodeFunctionData(functionFragment: "sizeAllocation", values?: undefined): string;
    encodeFunctionData(functionFragment: "sizeLimitRangeRate", values?: undefined): string;
    encodeFunctionData(functionFragment: "sortedStakers", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "stake", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "stakeApr", values?: undefined): string;
    encodeFunctionData(functionFragment: "stakeTaxRate", values?: undefined): string;
    encodeFunctionData(functionFragment: "stakers", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "stakingPoolImplementation", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalStaked", values?: undefined): string;
    encodeFunctionData(functionFragment: "totemToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;
    encodeFunctionData(functionFragment: "updateMaturingPrice", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "upgradeEnabled", values?: undefined): string;
    encodeFunctionData(functionFragment: "usdPrizeAmount", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdrawStuckTokens", values: [string, BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "wrappedToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "wrappedTokenSymbol", values?: undefined): string;

    decodeFunctionResult(functionFragment: "__PriceConsumer_initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "__WrappedTokenDistributor_initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "claimReward", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "collaborativeRange", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "collaborativeReward", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "declareEmergency", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deletePool", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "emergentWithdraw", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "endPool", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAveragePricePrediction", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDecimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDifference", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getEstimatedWrappedTokenForUSD", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getIndexedPrize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getIndexedStakingReward", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getLatestPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPathForUSDToWrappedToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPrize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getStakers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getStakingReward", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getStakingTax", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getUSDBalance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getUSDToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getWrappedTokenBalance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getswapRouter", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasUnStaked", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "indexedClaimReward", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isAnEmergency", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isDeleted", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isEnhancedEnabled", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isLocked", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isMatured", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "launchDate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lockPool", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lockTime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maturingPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maturityTime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "minimumStakeAmount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oracleContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oracleDecimal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "poolCreator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "poolType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "potentialCollabReward", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "predictions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "prizeAmount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "prizeRewardRates", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "purchaseWrappedToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rewardManager", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setActivationStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setOracleToZero", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSortedStakers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sizeAllocation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sizeLimitRangeRate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sortedStakers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stakeApr", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stakeTaxRate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stakers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stakingPoolImplementation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalStaked", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totemToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateMaturingPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeEnabled", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "usdPrizeAmount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawStuckTokens", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "wrappedToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "wrappedTokenSymbol", data: BytesLike): Result;

    events: {
        "ApproveTokens(address,uint256)": EventFragment;
        "DistributedBTC(address,uint256)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "PoolActivated()": EventFragment;
        "PoolDeactivated()": EventFragment;
        "PoolDeleted()": EventFragment;
        "PoolLocked()": EventFragment;
        "PoolMatured()": EventFragment;
        "PoolSorted()": EventFragment;
        "ReceivedTokens(address,uint256)": EventFragment;
        "Stake(address,uint256,uint256)": EventFragment;
        "TransferTokens(address,uint256)": EventFragment;
        "Unstake(address,uint256)": EventFragment;
        "WithdrawStakingReturn(address,uint256)": EventFragment;
        "WithdrawTotemPrize(address,uint256)": EventFragment;
        "WithdrawWrappedTokenPrize(address,uint256)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "ApproveTokens"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DistributedBTC"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PoolActivated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PoolDeactivated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PoolDeleted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PoolLocked"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PoolMatured"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PoolSorted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReceivedTokens"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TransferTokens"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Unstake"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "WithdrawStakingReturn"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "WithdrawTotemPrize"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "WithdrawWrappedTokenPrize"): EventFragment;
}

export class StakingPoolImplementation extends Contract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    listeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
    ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
    off<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    on<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    once<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    ): this;

    listeners(eventName?: string): Array<Listener>;
    off(eventName: string, listener: Listener): this;
    on(eventName: string, listener: Listener): this;
    once(eventName: string, listener: Listener): this;
    removeListener(eventName: string, listener: Listener): this;
    removeAllListeners(eventName?: string): this;

    queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
        event: TypedEventFilter<EventArgsArray, EventArgsObject>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined,
    ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

    interface: StakingPoolImplementationInterface;

    functions: {
        __PriceConsumer_initialize(
            _oracle: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "__PriceConsumer_initialize(address)"(
            _oracle: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        __WrappedTokenDistributor_initialize(
            swapRouterAddress: string,
            BUSDContractAddress: string,
            WrappedTokenContractAddress: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "__WrappedTokenDistributor_initialize(address,address,address)"(
            swapRouterAddress: string,
            BUSDContractAddress: string,
            WrappedTokenContractAddress: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        claimReward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        "claimReward()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        collaborativeRange(overrides?: CallOverrides): Promise<[BigNumber]>;

        "collaborativeRange()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        collaborativeReward(overrides?: CallOverrides): Promise<[BigNumber]>;

        "collaborativeReward()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        declareEmergency(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        "declareEmergency()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        deletePool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        "deletePool()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        emergentWithdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        "emergentWithdraw()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        endPool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        "endPool()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        getAveragePricePrediction(overrides?: CallOverrides): Promise<[BigNumber]>;

        "getAveragePricePrediction()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        getDecimals(overrides?: CallOverrides): Promise<[number]>;

        "getDecimals()"(overrides?: CallOverrides): Promise<[number]>;

        getDifference(prediction: BigNumberish, _range: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

        "getDifference(uint256,uint256)"(
            prediction: BigNumberish,
            _range: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<[BigNumber]>;

        getEstimatedWrappedTokenForUSD(_amount: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

        "getEstimatedWrappedTokenForUSD(uint256)"(
            _amount: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<[BigNumber]>;

        getIndexedPrize(
            _staker: string,
            _stakeIndex: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<[BigNumber, BigNumber]>;

        "getIndexedPrize(address,uint256)"(
            _staker: string,
            _stakeIndex: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<[BigNumber, BigNumber]>;

        getIndexedStakingReward(
            _staker: string,
            _stakeIndex: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<[BigNumber]>;

        "getIndexedStakingReward(address,uint256)"(
            _staker: string,
            _stakeIndex: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<[BigNumber]>;

        getLatestPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

        "getLatestPrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        getPathForUSDToWrappedToken(overrides?: CallOverrides): Promise<[string[]]>;

        "getPathForUSDToWrappedToken()"(overrides?: CallOverrides): Promise<[string[]]>;

        getPrize(_staker: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

        "getPrize(address)"(_staker: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

        getStakers(overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

        "getStakers()"(overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

        getStakingReward(_staker: string, overrides?: CallOverrides): Promise<[BigNumber]>;

        "getStakingReward(address)"(_staker: string, overrides?: CallOverrides): Promise<[BigNumber]>;

        getStakingTax(
            amount: BigNumberish,
            tokenTaxRate: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<[BigNumber, BigNumber]>;

        "getStakingTax(uint256,uint256)"(
            amount: BigNumberish,
            tokenTaxRate: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<[BigNumber, BigNumber]>;

        getUSDBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

        "getUSDBalance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        getUSDToken(overrides?: CallOverrides): Promise<[string]>;

        "getUSDToken()"(overrides?: CallOverrides): Promise<[string]>;

        getWrappedTokenBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

        "getWrappedTokenBalance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        getswapRouter(overrides?: CallOverrides): Promise<[string]>;

        "getswapRouter()"(overrides?: CallOverrides): Promise<[string]>;

        hasUnStaked(staker: string, stakeIndex: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

        "hasUnStaked(address,uint256)"(
            staker: string,
            stakeIndex: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<[boolean]>;

        indexedClaimReward(
            stakeIndex: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "indexedClaimReward(uint256)"(
            stakeIndex: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        isActive(overrides?: CallOverrides): Promise<[boolean]>;

        "isActive()"(overrides?: CallOverrides): Promise<[boolean]>;

        isAnEmergency(overrides?: CallOverrides): Promise<[boolean]>;

        "isAnEmergency()"(overrides?: CallOverrides): Promise<[boolean]>;

        isDeleted(overrides?: CallOverrides): Promise<[boolean]>;

        "isDeleted()"(overrides?: CallOverrides): Promise<[boolean]>;

        isEnhancedEnabled(overrides?: CallOverrides): Promise<[boolean]>;

        "isEnhancedEnabled()"(overrides?: CallOverrides): Promise<[boolean]>;

        isLocked(overrides?: CallOverrides): Promise<[boolean]>;

        "isLocked()"(overrides?: CallOverrides): Promise<[boolean]>;

        isMatured(overrides?: CallOverrides): Promise<[boolean]>;

        "isMatured()"(overrides?: CallOverrides): Promise<[boolean]>;

        launchDate(overrides?: CallOverrides): Promise<[BigNumber]>;

        "launchDate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        lockPool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        "lockPool()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        lockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

        "lockTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        lps(overrides?: CallOverrides): Promise<
            [
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                boolean,
                boolean,
            ] & {
                launchDate: BigNumber;
                lockTime: BigNumber;
                maturityTime: BigNumber;
                maturingPrice: BigNumber;
                usdPrizeAmount: BigNumber;
                prizeAmount: BigNumber;
                stakeApr: BigNumber;
                collaborativeReward: BigNumber;
                isEnhancedEnabled: boolean;
                isMatured: boolean;
            }
        >;

        "lps()"(overrides?: CallOverrides): Promise<
            [
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                boolean,
                boolean,
            ] & {
                launchDate: BigNumber;
                lockTime: BigNumber;
                maturityTime: BigNumber;
                maturingPrice: BigNumber;
                usdPrizeAmount: BigNumber;
                prizeAmount: BigNumber;
                stakeApr: BigNumber;
                collaborativeReward: BigNumber;
                isEnhancedEnabled: boolean;
                isMatured: boolean;
            }
        >;

        maturingPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

        "maturingPrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        maturityTime(overrides?: CallOverrides): Promise<[BigNumber]>;

        "maturityTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        minimumStakeAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

        "minimumStakeAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        oracleContract(overrides?: CallOverrides): Promise<[string]>;

        "oracleContract()"(overrides?: CallOverrides): Promise<[string]>;

        oracleDecimal(overrides?: CallOverrides): Promise<[BigNumber]>;

        "oracleDecimal()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        owner(overrides?: CallOverrides): Promise<[string]>;

        "owner()"(overrides?: CallOverrides): Promise<[string]>;

        poolCreator(overrides?: CallOverrides): Promise<[string]>;

        "poolCreator()"(overrides?: CallOverrides): Promise<[string]>;

        poolType(overrides?: CallOverrides): Promise<[string]>;

        "poolType()"(overrides?: CallOverrides): Promise<[string]>;

        potentialCollabReward(overrides?: CallOverrides): Promise<[BigNumber]>;

        "potentialCollabReward()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        predictions(
            arg0: string,
            arg1: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean, boolean] & {
                stakedBalance: BigNumber;
                stakedTime: BigNumber;
                amountWithdrawn: BigNumber;
                lastWithdrawalTime: BigNumber;
                pricePrediction: BigNumber;
                difference: BigNumber;
                rank: BigNumber;
                prizeRewardWithdrawn: boolean;
                didUnstake: boolean;
            }
        >;

        "predictions(address,uint256)"(
            arg0: string,
            arg1: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean, boolean] & {
                stakedBalance: BigNumber;
                stakedTime: BigNumber;
                amountWithdrawn: BigNumber;
                lastWithdrawalTime: BigNumber;
                pricePrediction: BigNumber;
                difference: BigNumber;
                rank: BigNumber;
                prizeRewardWithdrawn: boolean;
                didUnstake: boolean;
            }
        >;

        prizeAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

        "prizeAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        prizeRewardRates(
            arg0: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<[BigNumber, BigNumber] & { rank: BigNumber; percentage: BigNumber }>;

        "prizeRewardRates(uint256)"(
            arg0: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<[BigNumber, BigNumber] & { rank: BigNumber; percentage: BigNumber }>;

        purchaseWrappedToken(
            usdAmount: BigNumberish,
            deadline: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "purchaseWrappedToken(uint256,uint256)"(
            usdAmount: BigNumberish,
            deadline: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        "renounceOwnership()"(
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        rewardManager(overrides?: CallOverrides): Promise<[string]>;

        "rewardManager()"(overrides?: CallOverrides): Promise<[string]>;

        setActivationStatus(
            _activationStatus: boolean,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "setActivationStatus(bool)"(
            _activationStatus: boolean,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        setOracleToZero(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        "setOracleToZero()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        setSortedStakers(
            addrArray: [
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
            ],
            indexArray: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
            ],
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "setSortedStakers(address[25],uint256[25])"(
            addrArray: [
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
            ],
            indexArray: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
            ],
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        sizeAllocation(overrides?: CallOverrides): Promise<[BigNumber]>;

        "sizeAllocation()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        sizeLimitRangeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

        "sizeLimitRangeRate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        sortedStakers(
            arg0: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<[string, BigNumber] & { stakerAddress: string; index: BigNumber }>;

        "sortedStakers(uint256)"(
            arg0: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<[string, BigNumber] & { stakerAddress: string; index: BigNumber }>;

        stake(
            _amount: BigNumberish,
            _pricePrediction: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "stake(uint256,uint256)"(
            _amount: BigNumberish,
            _pricePrediction: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        stakeApr(overrides?: CallOverrides): Promise<[BigNumber]>;

        "stakeApr()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        stakeTaxRate(overrides?: CallOverrides): Promise<[BigNumber]>;

        "stakeTaxRate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        stakers(
            arg0: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<[string, BigNumber] & { stakerAddress: string; index: BigNumber }>;

        "stakers(uint256)"(
            arg0: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<[string, BigNumber] & { stakerAddress: string; index: BigNumber }>;

        stakingPoolImplementation(overrides?: CallOverrides): Promise<[string]>;

        "stakingPoolImplementation()"(overrides?: CallOverrides): Promise<[string]>;

        totalStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

        "totalStaked()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        totemToken(overrides?: CallOverrides): Promise<[string]>;

        "totemToken()"(overrides?: CallOverrides): Promise<[string]>;

        transferOwnership(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "transferOwnership(address)"(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        updateMaturingPrice(
            _price: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "updateMaturingPrice(uint256)"(
            _price: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        upgradeEnabled(overrides?: CallOverrides): Promise<[boolean]>;

        "upgradeEnabled()"(overrides?: CallOverrides): Promise<[boolean]>;

        usdPrizeAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

        "usdPrizeAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        withdrawStuckTokens(
            _stuckToken: string,
            amount: BigNumberish,
            receiver: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "withdrawStuckTokens(address,uint256,address)"(
            _stuckToken: string,
            amount: BigNumberish,
            receiver: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        wrappedToken(overrides?: CallOverrides): Promise<[string]>;

        "wrappedToken()"(overrides?: CallOverrides): Promise<[string]>;

        wrappedTokenSymbol(overrides?: CallOverrides): Promise<[string]>;

        "wrappedTokenSymbol()"(overrides?: CallOverrides): Promise<[string]>;
    };

    __PriceConsumer_initialize(
        _oracle: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "__PriceConsumer_initialize(address)"(
        _oracle: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    __WrappedTokenDistributor_initialize(
        swapRouterAddress: string,
        BUSDContractAddress: string,
        WrappedTokenContractAddress: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "__WrappedTokenDistributor_initialize(address,address,address)"(
        swapRouterAddress: string,
        BUSDContractAddress: string,
        WrappedTokenContractAddress: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    claimReward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    "claimReward()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    collaborativeRange(overrides?: CallOverrides): Promise<BigNumber>;

    "collaborativeRange()"(overrides?: CallOverrides): Promise<BigNumber>;

    collaborativeReward(overrides?: CallOverrides): Promise<BigNumber>;

    "collaborativeReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    declareEmergency(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    "declareEmergency()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    deletePool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    "deletePool()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    emergentWithdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    "emergentWithdraw()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    endPool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    "endPool()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    getAveragePricePrediction(overrides?: CallOverrides): Promise<BigNumber>;

    "getAveragePricePrediction()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDecimals(overrides?: CallOverrides): Promise<number>;

    "getDecimals()"(overrides?: CallOverrides): Promise<number>;

    getDifference(prediction: BigNumberish, _range: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "getDifference(uint256,uint256)"(
        prediction: BigNumberish,
        _range: BigNumberish,
        overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getEstimatedWrappedTokenForUSD(_amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "getEstimatedWrappedTokenForUSD(uint256)"(_amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getIndexedPrize(
        _staker: string,
        _stakeIndex: BigNumberish,
        overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    "getIndexedPrize(address,uint256)"(
        _staker: string,
        _stakeIndex: BigNumberish,
        overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    getIndexedStakingReward(_staker: string, _stakeIndex: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "getIndexedStakingReward(address,uint256)"(
        _staker: string,
        _stakeIndex: BigNumberish,
        overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getLatestPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "getLatestPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPathForUSDToWrappedToken(overrides?: CallOverrides): Promise<string[]>;

    "getPathForUSDToWrappedToken()"(overrides?: CallOverrides): Promise<string[]>;

    getPrize(_staker: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    "getPrize(address)"(_staker: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    getStakers(overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

    "getStakers()"(overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

    getStakingReward(_staker: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getStakingReward(address)"(_staker: string, overrides?: CallOverrides): Promise<BigNumber>;

    getStakingTax(
        amount: BigNumberish,
        tokenTaxRate: BigNumberish,
        overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    "getStakingTax(uint256,uint256)"(
        amount: BigNumberish,
        tokenTaxRate: BigNumberish,
        overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    getUSDBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "getUSDBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUSDToken(overrides?: CallOverrides): Promise<string>;

    "getUSDToken()"(overrides?: CallOverrides): Promise<string>;

    getWrappedTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "getWrappedTokenBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    getswapRouter(overrides?: CallOverrides): Promise<string>;

    "getswapRouter()"(overrides?: CallOverrides): Promise<string>;

    hasUnStaked(staker: string, stakeIndex: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "hasUnStaked(address,uint256)"(
        staker: string,
        stakeIndex: BigNumberish,
        overrides?: CallOverrides,
    ): Promise<boolean>;

    indexedClaimReward(
        stakeIndex: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "indexedClaimReward(uint256)"(
        stakeIndex: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    isActive(overrides?: CallOverrides): Promise<boolean>;

    "isActive()"(overrides?: CallOverrides): Promise<boolean>;

    isAnEmergency(overrides?: CallOverrides): Promise<boolean>;

    "isAnEmergency()"(overrides?: CallOverrides): Promise<boolean>;

    isDeleted(overrides?: CallOverrides): Promise<boolean>;

    "isDeleted()"(overrides?: CallOverrides): Promise<boolean>;

    isEnhancedEnabled(overrides?: CallOverrides): Promise<boolean>;

    "isEnhancedEnabled()"(overrides?: CallOverrides): Promise<boolean>;

    isLocked(overrides?: CallOverrides): Promise<boolean>;

    "isLocked()"(overrides?: CallOverrides): Promise<boolean>;

    isMatured(overrides?: CallOverrides): Promise<boolean>;

    "isMatured()"(overrides?: CallOverrides): Promise<boolean>;

    launchDate(overrides?: CallOverrides): Promise<BigNumber>;

    "launchDate()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockPool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    "lockPool()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    lockTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lockTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    lps(overrides?: CallOverrides): Promise<
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean, boolean] & {
            launchDate: BigNumber;
            lockTime: BigNumber;
            maturityTime: BigNumber;
            maturingPrice: BigNumber;
            usdPrizeAmount: BigNumber;
            prizeAmount: BigNumber;
            stakeApr: BigNumber;
            collaborativeReward: BigNumber;
            isEnhancedEnabled: boolean;
            isMatured: boolean;
        }
    >;

    "lps()"(overrides?: CallOverrides): Promise<
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean, boolean] & {
            launchDate: BigNumber;
            lockTime: BigNumber;
            maturityTime: BigNumber;
            maturingPrice: BigNumber;
            usdPrizeAmount: BigNumber;
            prizeAmount: BigNumber;
            stakeApr: BigNumber;
            collaborativeReward: BigNumber;
            isEnhancedEnabled: boolean;
            isMatured: boolean;
        }
    >;

    maturingPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "maturingPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    maturityTime(overrides?: CallOverrides): Promise<BigNumber>;

    "maturityTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    minimumStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumStakeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    oracleContract(overrides?: CallOverrides): Promise<string>;

    "oracleContract()"(overrides?: CallOverrides): Promise<string>;

    oracleDecimal(overrides?: CallOverrides): Promise<BigNumber>;

    "oracleDecimal()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    poolCreator(overrides?: CallOverrides): Promise<string>;

    "poolCreator()"(overrides?: CallOverrides): Promise<string>;

    poolType(overrides?: CallOverrides): Promise<string>;

    "poolType()"(overrides?: CallOverrides): Promise<string>;

    potentialCollabReward(overrides?: CallOverrides): Promise<BigNumber>;

    "potentialCollabReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    predictions(
        arg0: string,
        arg1: BigNumberish,
        overrides?: CallOverrides,
    ): Promise<
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean, boolean] & {
            stakedBalance: BigNumber;
            stakedTime: BigNumber;
            amountWithdrawn: BigNumber;
            lastWithdrawalTime: BigNumber;
            pricePrediction: BigNumber;
            difference: BigNumber;
            rank: BigNumber;
            prizeRewardWithdrawn: boolean;
            didUnstake: boolean;
        }
    >;

    "predictions(address,uint256)"(
        arg0: string,
        arg1: BigNumberish,
        overrides?: CallOverrides,
    ): Promise<
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean, boolean] & {
            stakedBalance: BigNumber;
            stakedTime: BigNumber;
            amountWithdrawn: BigNumber;
            lastWithdrawalTime: BigNumber;
            pricePrediction: BigNumber;
            difference: BigNumber;
            rank: BigNumber;
            prizeRewardWithdrawn: boolean;
            didUnstake: boolean;
        }
    >;

    prizeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "prizeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    prizeRewardRates(
        arg0: BigNumberish,
        overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { rank: BigNumber; percentage: BigNumber }>;

    "prizeRewardRates(uint256)"(
        arg0: BigNumberish,
        overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { rank: BigNumber; percentage: BigNumber }>;

    purchaseWrappedToken(
        usdAmount: BigNumberish,
        deadline: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "purchaseWrappedToken(uint256,uint256)"(
        usdAmount: BigNumberish,
        deadline: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    rewardManager(overrides?: CallOverrides): Promise<string>;

    "rewardManager()"(overrides?: CallOverrides): Promise<string>;

    setActivationStatus(
        _activationStatus: boolean,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "setActivationStatus(bool)"(
        _activationStatus: boolean,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setOracleToZero(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    "setOracleToZero()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setSortedStakers(
        addrArray: [
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
        ],
        indexArray: [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
        ],
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "setSortedStakers(address[25],uint256[25])"(
        addrArray: [
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
        ],
        indexArray: [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
        ],
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    sizeAllocation(overrides?: CallOverrides): Promise<BigNumber>;

    "sizeAllocation()"(overrides?: CallOverrides): Promise<BigNumber>;

    sizeLimitRangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    "sizeLimitRangeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    sortedStakers(
        arg0: BigNumberish,
        overrides?: CallOverrides,
    ): Promise<[string, BigNumber] & { stakerAddress: string; index: BigNumber }>;

    "sortedStakers(uint256)"(
        arg0: BigNumberish,
        overrides?: CallOverrides,
    ): Promise<[string, BigNumber] & { stakerAddress: string; index: BigNumber }>;

    stake(
        _amount: BigNumberish,
        _pricePrediction: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "stake(uint256,uint256)"(
        _amount: BigNumberish,
        _pricePrediction: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    stakeApr(overrides?: CallOverrides): Promise<BigNumber>;

    "stakeApr()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakeTaxRate(overrides?: CallOverrides): Promise<BigNumber>;

    "stakeTaxRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakers(
        arg0: BigNumberish,
        overrides?: CallOverrides,
    ): Promise<[string, BigNumber] & { stakerAddress: string; index: BigNumber }>;

    "stakers(uint256)"(
        arg0: BigNumberish,
        overrides?: CallOverrides,
    ): Promise<[string, BigNumber] & { stakerAddress: string; index: BigNumber }>;

    stakingPoolImplementation(overrides?: CallOverrides): Promise<string>;

    "stakingPoolImplementation()"(overrides?: CallOverrides): Promise<string>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    "totalStaked()"(overrides?: CallOverrides): Promise<BigNumber>;

    totemToken(overrides?: CallOverrides): Promise<string>;

    "totemToken()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
        newOwner: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
        newOwner: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateMaturingPrice(
        _price: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "updateMaturingPrice(uint256)"(
        _price: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    upgradeEnabled(overrides?: CallOverrides): Promise<boolean>;

    "upgradeEnabled()"(overrides?: CallOverrides): Promise<boolean>;

    usdPrizeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "usdPrizeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawStuckTokens(
        _stuckToken: string,
        amount: BigNumberish,
        receiver: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "withdrawStuckTokens(address,uint256,address)"(
        _stuckToken: string,
        amount: BigNumberish,
        receiver: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    wrappedToken(overrides?: CallOverrides): Promise<string>;

    "wrappedToken()"(overrides?: CallOverrides): Promise<string>;

    wrappedTokenSymbol(overrides?: CallOverrides): Promise<string>;

    "wrappedTokenSymbol()"(overrides?: CallOverrides): Promise<string>;

    callStatic: {
        __PriceConsumer_initialize(_oracle: string, overrides?: CallOverrides): Promise<void>;

        "__PriceConsumer_initialize(address)"(_oracle: string, overrides?: CallOverrides): Promise<void>;

        __WrappedTokenDistributor_initialize(
            swapRouterAddress: string,
            BUSDContractAddress: string,
            WrappedTokenContractAddress: string,
            overrides?: CallOverrides,
        ): Promise<void>;

        "__WrappedTokenDistributor_initialize(address,address,address)"(
            swapRouterAddress: string,
            BUSDContractAddress: string,
            WrappedTokenContractAddress: string,
            overrides?: CallOverrides,
        ): Promise<void>;

        claimReward(overrides?: CallOverrides): Promise<void>;

        "claimReward()"(overrides?: CallOverrides): Promise<void>;

        collaborativeRange(overrides?: CallOverrides): Promise<BigNumber>;

        "collaborativeRange()"(overrides?: CallOverrides): Promise<BigNumber>;

        collaborativeReward(overrides?: CallOverrides): Promise<BigNumber>;

        "collaborativeReward()"(overrides?: CallOverrides): Promise<BigNumber>;

        declareEmergency(overrides?: CallOverrides): Promise<void>;

        "declareEmergency()"(overrides?: CallOverrides): Promise<void>;

        deletePool(overrides?: CallOverrides): Promise<void>;

        "deletePool()"(overrides?: CallOverrides): Promise<void>;

        emergentWithdraw(overrides?: CallOverrides): Promise<void>;

        "emergentWithdraw()"(overrides?: CallOverrides): Promise<void>;

        endPool(overrides?: CallOverrides): Promise<void>;

        "endPool()"(overrides?: CallOverrides): Promise<void>;

        getAveragePricePrediction(overrides?: CallOverrides): Promise<BigNumber>;

        "getAveragePricePrediction()"(overrides?: CallOverrides): Promise<BigNumber>;

        getDecimals(overrides?: CallOverrides): Promise<number>;

        "getDecimals()"(overrides?: CallOverrides): Promise<number>;

        getDifference(prediction: BigNumberish, _range: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        "getDifference(uint256,uint256)"(
            prediction: BigNumberish,
            _range: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getEstimatedWrappedTokenForUSD(_amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        "getEstimatedWrappedTokenForUSD(uint256)"(_amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        getIndexedPrize(
            _staker: string,
            _stakeIndex: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<[BigNumber, BigNumber]>;

        "getIndexedPrize(address,uint256)"(
            _staker: string,
            _stakeIndex: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<[BigNumber, BigNumber]>;

        getIndexedStakingReward(
            _staker: string,
            _stakeIndex: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        "getIndexedStakingReward(address,uint256)"(
            _staker: string,
            _stakeIndex: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getLatestPrice(overrides?: CallOverrides): Promise<BigNumber>;

        "getLatestPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

        getPathForUSDToWrappedToken(overrides?: CallOverrides): Promise<string[]>;

        "getPathForUSDToWrappedToken()"(overrides?: CallOverrides): Promise<string[]>;

        getPrize(_staker: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

        "getPrize(address)"(_staker: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

        getStakers(overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

        "getStakers()"(overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

        getStakingReward(_staker: string, overrides?: CallOverrides): Promise<BigNumber>;

        "getStakingReward(address)"(_staker: string, overrides?: CallOverrides): Promise<BigNumber>;

        getStakingTax(
            amount: BigNumberish,
            tokenTaxRate: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<[BigNumber, BigNumber]>;

        "getStakingTax(uint256,uint256)"(
            amount: BigNumberish,
            tokenTaxRate: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<[BigNumber, BigNumber]>;

        getUSDBalance(overrides?: CallOverrides): Promise<BigNumber>;

        "getUSDBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

        getUSDToken(overrides?: CallOverrides): Promise<string>;

        "getUSDToken()"(overrides?: CallOverrides): Promise<string>;

        getWrappedTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

        "getWrappedTokenBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

        getswapRouter(overrides?: CallOverrides): Promise<string>;

        "getswapRouter()"(overrides?: CallOverrides): Promise<string>;

        hasUnStaked(staker: string, stakeIndex: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

        "hasUnStaked(address,uint256)"(
            staker: string,
            stakeIndex: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<boolean>;

        indexedClaimReward(stakeIndex: BigNumberish, overrides?: CallOverrides): Promise<void>;

        "indexedClaimReward(uint256)"(stakeIndex: BigNumberish, overrides?: CallOverrides): Promise<void>;

        isActive(overrides?: CallOverrides): Promise<boolean>;

        "isActive()"(overrides?: CallOverrides): Promise<boolean>;

        isAnEmergency(overrides?: CallOverrides): Promise<boolean>;

        "isAnEmergency()"(overrides?: CallOverrides): Promise<boolean>;

        isDeleted(overrides?: CallOverrides): Promise<boolean>;

        "isDeleted()"(overrides?: CallOverrides): Promise<boolean>;

        isEnhancedEnabled(overrides?: CallOverrides): Promise<boolean>;

        "isEnhancedEnabled()"(overrides?: CallOverrides): Promise<boolean>;

        isLocked(overrides?: CallOverrides): Promise<boolean>;

        "isLocked()"(overrides?: CallOverrides): Promise<boolean>;

        isMatured(overrides?: CallOverrides): Promise<boolean>;

        "isMatured()"(overrides?: CallOverrides): Promise<boolean>;

        launchDate(overrides?: CallOverrides): Promise<BigNumber>;

        "launchDate()"(overrides?: CallOverrides): Promise<BigNumber>;

        lockPool(overrides?: CallOverrides): Promise<void>;

        "lockPool()"(overrides?: CallOverrides): Promise<void>;

        lockTime(overrides?: CallOverrides): Promise<BigNumber>;

        "lockTime()"(overrides?: CallOverrides): Promise<BigNumber>;

        lps(overrides?: CallOverrides): Promise<
            [
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                boolean,
                boolean,
            ] & {
                launchDate: BigNumber;
                lockTime: BigNumber;
                maturityTime: BigNumber;
                maturingPrice: BigNumber;
                usdPrizeAmount: BigNumber;
                prizeAmount: BigNumber;
                stakeApr: BigNumber;
                collaborativeReward: BigNumber;
                isEnhancedEnabled: boolean;
                isMatured: boolean;
            }
        >;

        "lps()"(overrides?: CallOverrides): Promise<
            [
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                boolean,
                boolean,
            ] & {
                launchDate: BigNumber;
                lockTime: BigNumber;
                maturityTime: BigNumber;
                maturingPrice: BigNumber;
                usdPrizeAmount: BigNumber;
                prizeAmount: BigNumber;
                stakeApr: BigNumber;
                collaborativeReward: BigNumber;
                isEnhancedEnabled: boolean;
                isMatured: boolean;
            }
        >;

        maturingPrice(overrides?: CallOverrides): Promise<BigNumber>;

        "maturingPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

        maturityTime(overrides?: CallOverrides): Promise<BigNumber>;

        "maturityTime()"(overrides?: CallOverrides): Promise<BigNumber>;

        minimumStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

        "minimumStakeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

        oracleContract(overrides?: CallOverrides): Promise<string>;

        "oracleContract()"(overrides?: CallOverrides): Promise<string>;

        oracleDecimal(overrides?: CallOverrides): Promise<BigNumber>;

        "oracleDecimal()"(overrides?: CallOverrides): Promise<BigNumber>;

        owner(overrides?: CallOverrides): Promise<string>;

        "owner()"(overrides?: CallOverrides): Promise<string>;

        poolCreator(overrides?: CallOverrides): Promise<string>;

        "poolCreator()"(overrides?: CallOverrides): Promise<string>;

        poolType(overrides?: CallOverrides): Promise<string>;

        "poolType()"(overrides?: CallOverrides): Promise<string>;

        potentialCollabReward(overrides?: CallOverrides): Promise<BigNumber>;

        "potentialCollabReward()"(overrides?: CallOverrides): Promise<BigNumber>;

        predictions(
            arg0: string,
            arg1: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean, boolean] & {
                stakedBalance: BigNumber;
                stakedTime: BigNumber;
                amountWithdrawn: BigNumber;
                lastWithdrawalTime: BigNumber;
                pricePrediction: BigNumber;
                difference: BigNumber;
                rank: BigNumber;
                prizeRewardWithdrawn: boolean;
                didUnstake: boolean;
            }
        >;

        "predictions(address,uint256)"(
            arg0: string,
            arg1: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean, boolean] & {
                stakedBalance: BigNumber;
                stakedTime: BigNumber;
                amountWithdrawn: BigNumber;
                lastWithdrawalTime: BigNumber;
                pricePrediction: BigNumber;
                difference: BigNumber;
                rank: BigNumber;
                prizeRewardWithdrawn: boolean;
                didUnstake: boolean;
            }
        >;

        prizeAmount(overrides?: CallOverrides): Promise<BigNumber>;

        "prizeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

        prizeRewardRates(
            arg0: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<[BigNumber, BigNumber] & { rank: BigNumber; percentage: BigNumber }>;

        "prizeRewardRates(uint256)"(
            arg0: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<[BigNumber, BigNumber] & { rank: BigNumber; percentage: BigNumber }>;

        purchaseWrappedToken(usdAmount: BigNumberish, deadline: BigNumberish, overrides?: CallOverrides): Promise<void>;

        "purchaseWrappedToken(uint256,uint256)"(
            usdAmount: BigNumberish,
            deadline: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<void>;

        renounceOwnership(overrides?: CallOverrides): Promise<void>;

        "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

        rewardManager(overrides?: CallOverrides): Promise<string>;

        "rewardManager()"(overrides?: CallOverrides): Promise<string>;

        setActivationStatus(_activationStatus: boolean, overrides?: CallOverrides): Promise<void>;

        "setActivationStatus(bool)"(_activationStatus: boolean, overrides?: CallOverrides): Promise<void>;

        setOracleToZero(overrides?: CallOverrides): Promise<void>;

        "setOracleToZero()"(overrides?: CallOverrides): Promise<void>;

        setSortedStakers(
            addrArray: [
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
            ],
            indexArray: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
            ],
            overrides?: CallOverrides,
        ): Promise<void>;

        "setSortedStakers(address[25],uint256[25])"(
            addrArray: [
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
            ],
            indexArray: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
            ],
            overrides?: CallOverrides,
        ): Promise<void>;

        sizeAllocation(overrides?: CallOverrides): Promise<BigNumber>;

        "sizeAllocation()"(overrides?: CallOverrides): Promise<BigNumber>;

        sizeLimitRangeRate(overrides?: CallOverrides): Promise<BigNumber>;

        "sizeLimitRangeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

        sortedStakers(
            arg0: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<[string, BigNumber] & { stakerAddress: string; index: BigNumber }>;

        "sortedStakers(uint256)"(
            arg0: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<[string, BigNumber] & { stakerAddress: string; index: BigNumber }>;

        stake(_amount: BigNumberish, _pricePrediction: BigNumberish, overrides?: CallOverrides): Promise<void>;

        "stake(uint256,uint256)"(
            _amount: BigNumberish,
            _pricePrediction: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<void>;

        stakeApr(overrides?: CallOverrides): Promise<BigNumber>;

        "stakeApr()"(overrides?: CallOverrides): Promise<BigNumber>;

        stakeTaxRate(overrides?: CallOverrides): Promise<BigNumber>;

        "stakeTaxRate()"(overrides?: CallOverrides): Promise<BigNumber>;

        stakers(
            arg0: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<[string, BigNumber] & { stakerAddress: string; index: BigNumber }>;

        "stakers(uint256)"(
            arg0: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<[string, BigNumber] & { stakerAddress: string; index: BigNumber }>;

        stakingPoolImplementation(overrides?: CallOverrides): Promise<string>;

        "stakingPoolImplementation()"(overrides?: CallOverrides): Promise<string>;

        totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

        "totalStaked()"(overrides?: CallOverrides): Promise<BigNumber>;

        totemToken(overrides?: CallOverrides): Promise<string>;

        "totemToken()"(overrides?: CallOverrides): Promise<string>;

        transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

        "transferOwnership(address)"(newOwner: string, overrides?: CallOverrides): Promise<void>;

        updateMaturingPrice(_price: BigNumberish, overrides?: CallOverrides): Promise<void>;

        "updateMaturingPrice(uint256)"(_price: BigNumberish, overrides?: CallOverrides): Promise<void>;

        upgradeEnabled(overrides?: CallOverrides): Promise<boolean>;

        "upgradeEnabled()"(overrides?: CallOverrides): Promise<boolean>;

        usdPrizeAmount(overrides?: CallOverrides): Promise<BigNumber>;

        "usdPrizeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

        withdrawStuckTokens(
            _stuckToken: string,
            amount: BigNumberish,
            receiver: string,
            overrides?: CallOverrides,
        ): Promise<void>;

        "withdrawStuckTokens(address,uint256,address)"(
            _stuckToken: string,
            amount: BigNumberish,
            receiver: string,
            overrides?: CallOverrides,
        ): Promise<void>;

        wrappedToken(overrides?: CallOverrides): Promise<string>;

        "wrappedToken()"(overrides?: CallOverrides): Promise<string>;

        wrappedTokenSymbol(overrides?: CallOverrides): Promise<string>;

        "wrappedTokenSymbol()"(overrides?: CallOverrides): Promise<string>;
    };

    filters: {
        ApproveTokens(
            to: string | null,
            amount: null,
        ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;

        DistributedBTC(
            to: string | null,
            amount: null,
        ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;

        OwnershipTransferred(
            previousOwner: string | null,
            newOwner: string | null,
        ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>;

        PoolActivated(): TypedEventFilter<[], {}>;

        PoolDeactivated(): TypedEventFilter<[], {}>;

        PoolDeleted(): TypedEventFilter<[], {}>;

        PoolLocked(): TypedEventFilter<[], {}>;

        PoolMatured(): TypedEventFilter<[], {}>;

        PoolSorted(): TypedEventFilter<[], {}>;

        ReceivedTokens(
            from: string | null,
            amount: null,
        ): TypedEventFilter<[string, BigNumber], { from: string; amount: BigNumber }>;

        Stake(
            user: string | null,
            amount: null,
            pricePrediction: null,
        ): TypedEventFilter<
            [string, BigNumber, BigNumber],
            { user: string; amount: BigNumber; pricePrediction: BigNumber }
        >;

        TransferTokens(
            to: string | null,
            amount: null,
        ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;

        Unstake(
            user: string | null,
            amount: null,
        ): TypedEventFilter<[string, BigNumber], { user: string; amount: BigNumber }>;

        WithdrawStakingReturn(
            user: string | null,
            stakingReturn: null,
        ): TypedEventFilter<[string, BigNumber], { user: string; stakingReturn: BigNumber }>;

        WithdrawTotemPrize(
            user: string | null,
            totemPrize: null,
        ): TypedEventFilter<[string, BigNumber], { user: string; totemPrize: BigNumber }>;

        WithdrawWrappedTokenPrize(
            user: string | null,
            wrappedTokenPrize: null,
        ): TypedEventFilter<[string, BigNumber], { user: string; wrappedTokenPrize: BigNumber }>;
    };

    estimateGas: {
        __PriceConsumer_initialize(
            _oracle: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "__PriceConsumer_initialize(address)"(
            _oracle: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        __WrappedTokenDistributor_initialize(
            swapRouterAddress: string,
            BUSDContractAddress: string,
            WrappedTokenContractAddress: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "__WrappedTokenDistributor_initialize(address,address,address)"(
            swapRouterAddress: string,
            BUSDContractAddress: string,
            WrappedTokenContractAddress: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        claimReward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        "claimReward()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        collaborativeRange(overrides?: CallOverrides): Promise<BigNumber>;

        "collaborativeRange()"(overrides?: CallOverrides): Promise<BigNumber>;

        collaborativeReward(overrides?: CallOverrides): Promise<BigNumber>;

        "collaborativeReward()"(overrides?: CallOverrides): Promise<BigNumber>;

        declareEmergency(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        "declareEmergency()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        deletePool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        "deletePool()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        emergentWithdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        "emergentWithdraw()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        endPool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        "endPool()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        getAveragePricePrediction(overrides?: CallOverrides): Promise<BigNumber>;

        "getAveragePricePrediction()"(overrides?: CallOverrides): Promise<BigNumber>;

        getDecimals(overrides?: CallOverrides): Promise<BigNumber>;

        "getDecimals()"(overrides?: CallOverrides): Promise<BigNumber>;

        getDifference(prediction: BigNumberish, _range: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        "getDifference(uint256,uint256)"(
            prediction: BigNumberish,
            _range: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getEstimatedWrappedTokenForUSD(_amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        "getEstimatedWrappedTokenForUSD(uint256)"(_amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        getIndexedPrize(_staker: string, _stakeIndex: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        "getIndexedPrize(address,uint256)"(
            _staker: string,
            _stakeIndex: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getIndexedStakingReward(
            _staker: string,
            _stakeIndex: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        "getIndexedStakingReward(address,uint256)"(
            _staker: string,
            _stakeIndex: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getLatestPrice(overrides?: CallOverrides): Promise<BigNumber>;

        "getLatestPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

        getPathForUSDToWrappedToken(overrides?: CallOverrides): Promise<BigNumber>;

        "getPathForUSDToWrappedToken()"(overrides?: CallOverrides): Promise<BigNumber>;

        getPrize(_staker: string, overrides?: CallOverrides): Promise<BigNumber>;

        "getPrize(address)"(_staker: string, overrides?: CallOverrides): Promise<BigNumber>;

        getStakers(overrides?: CallOverrides): Promise<BigNumber>;

        "getStakers()"(overrides?: CallOverrides): Promise<BigNumber>;

        getStakingReward(_staker: string, overrides?: CallOverrides): Promise<BigNumber>;

        "getStakingReward(address)"(_staker: string, overrides?: CallOverrides): Promise<BigNumber>;

        getStakingTax(amount: BigNumberish, tokenTaxRate: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        "getStakingTax(uint256,uint256)"(
            amount: BigNumberish,
            tokenTaxRate: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getUSDBalance(overrides?: CallOverrides): Promise<BigNumber>;

        "getUSDBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

        getUSDToken(overrides?: CallOverrides): Promise<BigNumber>;

        "getUSDToken()"(overrides?: CallOverrides): Promise<BigNumber>;

        getWrappedTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

        "getWrappedTokenBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

        getswapRouter(overrides?: CallOverrides): Promise<BigNumber>;

        "getswapRouter()"(overrides?: CallOverrides): Promise<BigNumber>;

        hasUnStaked(staker: string, stakeIndex: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        "hasUnStaked(address,uint256)"(
            staker: string,
            stakeIndex: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        indexedClaimReward(
            stakeIndex: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "indexedClaimReward(uint256)"(
            stakeIndex: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        isActive(overrides?: CallOverrides): Promise<BigNumber>;

        "isActive()"(overrides?: CallOverrides): Promise<BigNumber>;

        isAnEmergency(overrides?: CallOverrides): Promise<BigNumber>;

        "isAnEmergency()"(overrides?: CallOverrides): Promise<BigNumber>;

        isDeleted(overrides?: CallOverrides): Promise<BigNumber>;

        "isDeleted()"(overrides?: CallOverrides): Promise<BigNumber>;

        isEnhancedEnabled(overrides?: CallOverrides): Promise<BigNumber>;

        "isEnhancedEnabled()"(overrides?: CallOverrides): Promise<BigNumber>;

        isLocked(overrides?: CallOverrides): Promise<BigNumber>;

        "isLocked()"(overrides?: CallOverrides): Promise<BigNumber>;

        isMatured(overrides?: CallOverrides): Promise<BigNumber>;

        "isMatured()"(overrides?: CallOverrides): Promise<BigNumber>;

        launchDate(overrides?: CallOverrides): Promise<BigNumber>;

        "launchDate()"(overrides?: CallOverrides): Promise<BigNumber>;

        lockPool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        "lockPool()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        lockTime(overrides?: CallOverrides): Promise<BigNumber>;

        "lockTime()"(overrides?: CallOverrides): Promise<BigNumber>;

        lps(overrides?: CallOverrides): Promise<BigNumber>;

        "lps()"(overrides?: CallOverrides): Promise<BigNumber>;

        maturingPrice(overrides?: CallOverrides): Promise<BigNumber>;

        "maturingPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

        maturityTime(overrides?: CallOverrides): Promise<BigNumber>;

        "maturityTime()"(overrides?: CallOverrides): Promise<BigNumber>;

        minimumStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

        "minimumStakeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

        oracleContract(overrides?: CallOverrides): Promise<BigNumber>;

        "oracleContract()"(overrides?: CallOverrides): Promise<BigNumber>;

        oracleDecimal(overrides?: CallOverrides): Promise<BigNumber>;

        "oracleDecimal()"(overrides?: CallOverrides): Promise<BigNumber>;

        owner(overrides?: CallOverrides): Promise<BigNumber>;

        "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

        poolCreator(overrides?: CallOverrides): Promise<BigNumber>;

        "poolCreator()"(overrides?: CallOverrides): Promise<BigNumber>;

        poolType(overrides?: CallOverrides): Promise<BigNumber>;

        "poolType()"(overrides?: CallOverrides): Promise<BigNumber>;

        potentialCollabReward(overrides?: CallOverrides): Promise<BigNumber>;

        "potentialCollabReward()"(overrides?: CallOverrides): Promise<BigNumber>;

        predictions(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        "predictions(address,uint256)"(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        prizeAmount(overrides?: CallOverrides): Promise<BigNumber>;

        "prizeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

        prizeRewardRates(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        "prizeRewardRates(uint256)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        purchaseWrappedToken(
            usdAmount: BigNumberish,
            deadline: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "purchaseWrappedToken(uint256,uint256)"(
            usdAmount: BigNumberish,
            deadline: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        "renounceOwnership()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        rewardManager(overrides?: CallOverrides): Promise<BigNumber>;

        "rewardManager()"(overrides?: CallOverrides): Promise<BigNumber>;

        setActivationStatus(
            _activationStatus: boolean,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "setActivationStatus(bool)"(
            _activationStatus: boolean,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        setOracleToZero(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        "setOracleToZero()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        setSortedStakers(
            addrArray: [
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
            ],
            indexArray: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
            ],
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "setSortedStakers(address[25],uint256[25])"(
            addrArray: [
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
            ],
            indexArray: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
            ],
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        sizeAllocation(overrides?: CallOverrides): Promise<BigNumber>;

        "sizeAllocation()"(overrides?: CallOverrides): Promise<BigNumber>;

        sizeLimitRangeRate(overrides?: CallOverrides): Promise<BigNumber>;

        "sizeLimitRangeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

        sortedStakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        "sortedStakers(uint256)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        stake(
            _amount: BigNumberish,
            _pricePrediction: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "stake(uint256,uint256)"(
            _amount: BigNumberish,
            _pricePrediction: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        stakeApr(overrides?: CallOverrides): Promise<BigNumber>;

        "stakeApr()"(overrides?: CallOverrides): Promise<BigNumber>;

        stakeTaxRate(overrides?: CallOverrides): Promise<BigNumber>;

        "stakeTaxRate()"(overrides?: CallOverrides): Promise<BigNumber>;

        stakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        "stakers(uint256)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        stakingPoolImplementation(overrides?: CallOverrides): Promise<BigNumber>;

        "stakingPoolImplementation()"(overrides?: CallOverrides): Promise<BigNumber>;

        totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

        "totalStaked()"(overrides?: CallOverrides): Promise<BigNumber>;

        totemToken(overrides?: CallOverrides): Promise<BigNumber>;

        "totemToken()"(overrides?: CallOverrides): Promise<BigNumber>;

        transferOwnership(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "transferOwnership(address)"(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        updateMaturingPrice(
            _price: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "updateMaturingPrice(uint256)"(
            _price: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        upgradeEnabled(overrides?: CallOverrides): Promise<BigNumber>;

        "upgradeEnabled()"(overrides?: CallOverrides): Promise<BigNumber>;

        usdPrizeAmount(overrides?: CallOverrides): Promise<BigNumber>;

        "usdPrizeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

        withdrawStuckTokens(
            _stuckToken: string,
            amount: BigNumberish,
            receiver: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "withdrawStuckTokens(address,uint256,address)"(
            _stuckToken: string,
            amount: BigNumberish,
            receiver: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        wrappedToken(overrides?: CallOverrides): Promise<BigNumber>;

        "wrappedToken()"(overrides?: CallOverrides): Promise<BigNumber>;

        wrappedTokenSymbol(overrides?: CallOverrides): Promise<BigNumber>;

        "wrappedTokenSymbol()"(overrides?: CallOverrides): Promise<BigNumber>;
    };

    populateTransaction: {
        __PriceConsumer_initialize(
            _oracle: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "__PriceConsumer_initialize(address)"(
            _oracle: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        __WrappedTokenDistributor_initialize(
            swapRouterAddress: string,
            BUSDContractAddress: string,
            WrappedTokenContractAddress: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "__WrappedTokenDistributor_initialize(address,address,address)"(
            swapRouterAddress: string,
            BUSDContractAddress: string,
            WrappedTokenContractAddress: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        claimReward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        "claimReward()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        collaborativeRange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "collaborativeRange()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        collaborativeReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "collaborativeReward()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        declareEmergency(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        "declareEmergency()"(
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        deletePool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        "deletePool()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        emergentWithdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        "emergentWithdraw()"(
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        endPool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        "endPool()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        getAveragePricePrediction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "getAveragePricePrediction()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "getDecimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getDifference(
            prediction: BigNumberish,
            _range: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        "getDifference(uint256,uint256)"(
            prediction: BigNumberish,
            _range: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getEstimatedWrappedTokenForUSD(_amount: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "getEstimatedWrappedTokenForUSD(uint256)"(
            _amount: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getIndexedPrize(
            _staker: string,
            _stakeIndex: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        "getIndexedPrize(address,uint256)"(
            _staker: string,
            _stakeIndex: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getIndexedStakingReward(
            _staker: string,
            _stakeIndex: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        "getIndexedStakingReward(address,uint256)"(
            _staker: string,
            _stakeIndex: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getLatestPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "getLatestPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getPathForUSDToWrappedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "getPathForUSDToWrappedToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getPrize(_staker: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "getPrize(address)"(_staker: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getStakers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "getStakers()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getStakingReward(_staker: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "getStakingReward(address)"(_staker: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getStakingTax(
            amount: BigNumberish,
            tokenTaxRate: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        "getStakingTax(uint256,uint256)"(
            amount: BigNumberish,
            tokenTaxRate: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getUSDBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "getUSDBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getUSDToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "getUSDToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getWrappedTokenBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "getWrappedTokenBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getswapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "getswapRouter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        hasUnStaked(staker: string, stakeIndex: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "hasUnStaked(address,uint256)"(
            staker: string,
            stakeIndex: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        indexedClaimReward(
            stakeIndex: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "indexedClaimReward(uint256)"(
            stakeIndex: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        isActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "isActive()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        isAnEmergency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "isAnEmergency()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        isDeleted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "isDeleted()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        isEnhancedEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "isEnhancedEnabled()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        isLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "isLocked()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        isMatured(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "isMatured()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        launchDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "launchDate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        lockPool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        "lockPool()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        lockTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "lockTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        lps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "lps()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        maturingPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "maturingPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        maturityTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "maturityTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        minimumStakeAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "minimumStakeAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        oracleContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "oracleContract()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        oracleDecimal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "oracleDecimal()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        poolCreator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "poolCreator()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        poolType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "poolType()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        potentialCollabReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "potentialCollabReward()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        predictions(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "predictions(address,uint256)"(
            arg0: string,
            arg1: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        prizeAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "prizeAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        prizeRewardRates(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "prizeRewardRates(uint256)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        purchaseWrappedToken(
            usdAmount: BigNumberish,
            deadline: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "purchaseWrappedToken(uint256,uint256)"(
            usdAmount: BigNumberish,
            deadline: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        "renounceOwnership()"(
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        rewardManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "rewardManager()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        setActivationStatus(
            _activationStatus: boolean,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "setActivationStatus(bool)"(
            _activationStatus: boolean,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        setOracleToZero(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        "setOracleToZero()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        setSortedStakers(
            addrArray: [
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
            ],
            indexArray: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
            ],
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "setSortedStakers(address[25],uint256[25])"(
            addrArray: [
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
            ],
            indexArray: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish,
            ],
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        sizeAllocation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "sizeAllocation()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        sizeLimitRangeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "sizeLimitRangeRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        sortedStakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "sortedStakers(uint256)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        stake(
            _amount: BigNumberish,
            _pricePrediction: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "stake(uint256,uint256)"(
            _amount: BigNumberish,
            _pricePrediction: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        stakeApr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "stakeApr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        stakeTaxRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "stakeTaxRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        stakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "stakers(uint256)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        stakingPoolImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "stakingPoolImplementation()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        totalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "totalStaked()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        totemToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "totemToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        transferOwnership(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "transferOwnership(address)"(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        updateMaturingPrice(
            _price: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "updateMaturingPrice(uint256)"(
            _price: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        upgradeEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "upgradeEnabled()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        usdPrizeAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "usdPrizeAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        withdrawStuckTokens(
            _stuckToken: string,
            amount: BigNumberish,
            receiver: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "withdrawStuckTokens(address,uint256,address)"(
            _stuckToken: string,
            amount: BigNumberish,
            receiver: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        wrappedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "wrappedToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        wrappedTokenSymbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "wrappedTokenSymbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
