/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
    ethers,
    EventFilter,
    Signer,
    BigNumber,
    BigNumberish,
    PopulatedTransaction,
    Contract,
    ContractTransaction,
    Overrides,
    CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TotemTokenInterface extends ethers.utils.Interface {
    functions: {
        "ADVISORS()": FunctionFragment;
        "AdvisorsAddr()": FunctionFragment;
        "COMMUNITY_DEVELOPMENT()": FunctionFragment;
        "CommunityDevelopmentAddr()": FunctionFragment;
        "DECIMALS()": FunctionFragment;
        "INITIAL_SUPPLY()": FunctionFragment;
        "LAUNCH_POOL()": FunctionFragment;
        "LIQUIDITY_POOL()": FunctionFragment;
        "LiquidityPoolAddr()": FunctionFragment;
        "NAME()": FunctionFragment;
        "PRIVATE_SALE()": FunctionFragment;
        "PUBLIC_SALE()": FunctionFragment;
        "PrivateSaleAddr()": FunctionFragment;
        "PublicSaleAddr()": FunctionFragment;
        "SEED_INVESTMENT()": FunctionFragment;
        "STAKING_REWARDS()": FunctionFragment;
        "STRATEGIC_ROUND()": FunctionFragment;
        "SYMBOL()": FunctionFragment;
        "SeedInvestmentAddr()": FunctionFragment;
        "StakingRewardsAddr()": FunctionFragment;
        "StrategicRoundAddr()": FunctionFragment;
        "TEAM_ALLOCATION()": FunctionFragment;
        "TeamAllocationAddr()": FunctionFragment;
        "allowance(address,address)": FunctionFragment;
        "approve(address,uint256)": FunctionFragment;
        "balanceOf(address)": FunctionFragment;
        "decimals()": FunctionFragment;
        "decreaseAllowance(address,uint256)": FunctionFragment;
        "distributeTokens()": FunctionFragment;
        "increaseAllowance(address,uint256)": FunctionFragment;
        "locker()": FunctionFragment;
        "name()": FunctionFragment;
        "owner()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setDistributionTeamsAddresses(address,address,address,address,address,address,address,address,address)": FunctionFragment;
        "setLocker(address)": FunctionFragment;
        "setTaxExemptStatus(address,bool)": FunctionFragment;
        "setTaxRate(uint256)": FunctionFragment;
        "setTaxationWallet(address)": FunctionFragment;
        "symbol()": FunctionFragment;
        "taxExempt(address)": FunctionFragment;
        "taxRate()": FunctionFragment;
        "taxationWallet()": FunctionFragment;
        "totalSupply()": FunctionFragment;
        "transfer(address,uint256)": FunctionFragment;
        "transferFrom(address,address,uint256)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
    };

    encodeFunctionData(functionFragment: "ADVISORS", values?: undefined): string;
    encodeFunctionData(functionFragment: "AdvisorsAddr", values?: undefined): string;
    encodeFunctionData(functionFragment: "COMMUNITY_DEVELOPMENT", values?: undefined): string;
    encodeFunctionData(functionFragment: "CommunityDevelopmentAddr", values?: undefined): string;
    encodeFunctionData(functionFragment: "DECIMALS", values?: undefined): string;
    encodeFunctionData(functionFragment: "INITIAL_SUPPLY", values?: undefined): string;
    encodeFunctionData(functionFragment: "LAUNCH_POOL", values?: undefined): string;
    encodeFunctionData(functionFragment: "LIQUIDITY_POOL", values?: undefined): string;
    encodeFunctionData(functionFragment: "LiquidityPoolAddr", values?: undefined): string;
    encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
    encodeFunctionData(functionFragment: "PRIVATE_SALE", values?: undefined): string;
    encodeFunctionData(functionFragment: "PUBLIC_SALE", values?: undefined): string;
    encodeFunctionData(functionFragment: "PrivateSaleAddr", values?: undefined): string;
    encodeFunctionData(functionFragment: "PublicSaleAddr", values?: undefined): string;
    encodeFunctionData(functionFragment: "SEED_INVESTMENT", values?: undefined): string;
    encodeFunctionData(functionFragment: "STAKING_REWARDS", values?: undefined): string;
    encodeFunctionData(functionFragment: "STRATEGIC_ROUND", values?: undefined): string;
    encodeFunctionData(functionFragment: "SYMBOL", values?: undefined): string;
    encodeFunctionData(functionFragment: "SeedInvestmentAddr", values?: undefined): string;
    encodeFunctionData(functionFragment: "StakingRewardsAddr", values?: undefined): string;
    encodeFunctionData(functionFragment: "StrategicRoundAddr", values?: undefined): string;
    encodeFunctionData(functionFragment: "TEAM_ALLOCATION", values?: undefined): string;
    encodeFunctionData(functionFragment: "TeamAllocationAddr", values?: undefined): string;
    encodeFunctionData(functionFragment: "allowance", values: [string, string]): string;
    encodeFunctionData(functionFragment: "approve", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
    encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "decreaseAllowance", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "distributeTokens", values?: undefined): string;
    encodeFunctionData(functionFragment: "increaseAllowance", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "locker", values?: undefined): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "setDistributionTeamsAddresses",
        values: [string, string, string, string, string, string, string, string, string],
    ): string;
    encodeFunctionData(functionFragment: "setLocker", values: [string]): string;
    encodeFunctionData(functionFragment: "setTaxExemptStatus", values: [string, boolean]): string;
    encodeFunctionData(functionFragment: "setTaxRate", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setTaxationWallet", values: [string]): string;
    encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
    encodeFunctionData(functionFragment: "taxExempt", values: [string]): string;
    encodeFunctionData(functionFragment: "taxRate", values?: undefined): string;
    encodeFunctionData(functionFragment: "taxationWallet", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
    encodeFunctionData(functionFragment: "transfer", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "transferFrom", values: [string, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;

    decodeFunctionResult(functionFragment: "ADVISORS", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "AdvisorsAddr", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "COMMUNITY_DEVELOPMENT", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "CommunityDevelopmentAddr", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "DECIMALS", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "INITIAL_SUPPLY", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "LAUNCH_POOL", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "LIQUIDITY_POOL", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "LiquidityPoolAddr", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "PRIVATE_SALE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "PUBLIC_SALE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "PrivateSaleAddr", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "PublicSaleAddr", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "SEED_INVESTMENT", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "STAKING_REWARDS", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "STRATEGIC_ROUND", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "SYMBOL", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "SeedInvestmentAddr", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "StakingRewardsAddr", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "StrategicRoundAddr", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "TEAM_ALLOCATION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "TeamAllocationAddr", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decreaseAllowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "distributeTokens", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "increaseAllowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "locker", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDistributionTeamsAddresses", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setLocker", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTaxExemptStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTaxRate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTaxationWallet", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "taxExempt", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "taxRate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "taxationWallet", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;

    events: {
        "Approval(address,address,uint256)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "SetLocker(address)": EventFragment;
        "Transfer(address,address,uint256)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetLocker"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class TotemToken extends Contract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    listeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
    ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
    off<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    on<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    once<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    ): this;

    listeners(eventName?: string): Array<Listener>;
    off(eventName: string, listener: Listener): this;
    on(eventName: string, listener: Listener): this;
    once(eventName: string, listener: Listener): this;
    removeListener(eventName: string, listener: Listener): this;
    removeAllListeners(eventName?: string): this;

    queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
        event: TypedEventFilter<EventArgsArray, EventArgsObject>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined,
    ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

    interface: TotemTokenInterface;

    functions: {
        ADVISORS(overrides?: CallOverrides): Promise<[BigNumber]>;

        "ADVISORS()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        AdvisorsAddr(overrides?: CallOverrides): Promise<[string]>;

        "AdvisorsAddr()"(overrides?: CallOverrides): Promise<[string]>;

        COMMUNITY_DEVELOPMENT(overrides?: CallOverrides): Promise<[BigNumber]>;

        "COMMUNITY_DEVELOPMENT()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        CommunityDevelopmentAddr(overrides?: CallOverrides): Promise<[string]>;

        "CommunityDevelopmentAddr()"(overrides?: CallOverrides): Promise<[string]>;

        DECIMALS(overrides?: CallOverrides): Promise<[number]>;

        "DECIMALS()"(overrides?: CallOverrides): Promise<[number]>;

        INITIAL_SUPPLY(overrides?: CallOverrides): Promise<[BigNumber]>;

        "INITIAL_SUPPLY()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        LAUNCH_POOL(overrides?: CallOverrides): Promise<[BigNumber]>;

        "LAUNCH_POOL()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        LIQUIDITY_POOL(overrides?: CallOverrides): Promise<[BigNumber]>;

        "LIQUIDITY_POOL()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        LiquidityPoolAddr(overrides?: CallOverrides): Promise<[string]>;

        "LiquidityPoolAddr()"(overrides?: CallOverrides): Promise<[string]>;

        NAME(overrides?: CallOverrides): Promise<[string]>;

        "NAME()"(overrides?: CallOverrides): Promise<[string]>;

        PRIVATE_SALE(overrides?: CallOverrides): Promise<[BigNumber]>;

        "PRIVATE_SALE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        PUBLIC_SALE(overrides?: CallOverrides): Promise<[BigNumber]>;

        "PUBLIC_SALE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        PrivateSaleAddr(overrides?: CallOverrides): Promise<[string]>;

        "PrivateSaleAddr()"(overrides?: CallOverrides): Promise<[string]>;

        PublicSaleAddr(overrides?: CallOverrides): Promise<[string]>;

        "PublicSaleAddr()"(overrides?: CallOverrides): Promise<[string]>;

        SEED_INVESTMENT(overrides?: CallOverrides): Promise<[BigNumber]>;

        "SEED_INVESTMENT()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        STAKING_REWARDS(overrides?: CallOverrides): Promise<[BigNumber]>;

        "STAKING_REWARDS()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        STRATEGIC_ROUND(overrides?: CallOverrides): Promise<[BigNumber]>;

        "STRATEGIC_ROUND()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        SYMBOL(overrides?: CallOverrides): Promise<[string]>;

        "SYMBOL()"(overrides?: CallOverrides): Promise<[string]>;

        SeedInvestmentAddr(overrides?: CallOverrides): Promise<[string]>;

        "SeedInvestmentAddr()"(overrides?: CallOverrides): Promise<[string]>;

        StakingRewardsAddr(overrides?: CallOverrides): Promise<[string]>;

        "StakingRewardsAddr()"(overrides?: CallOverrides): Promise<[string]>;

        StrategicRoundAddr(overrides?: CallOverrides): Promise<[string]>;

        "StrategicRoundAddr()"(overrides?: CallOverrides): Promise<[string]>;

        TEAM_ALLOCATION(overrides?: CallOverrides): Promise<[BigNumber]>;

        "TEAM_ALLOCATION()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        TeamAllocationAddr(overrides?: CallOverrides): Promise<[string]>;

        "TeamAllocationAddr()"(overrides?: CallOverrides): Promise<[string]>;

        allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

        "allowance(address,address)"(owner: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

        approve(
            spender: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "approve(address,uint256)"(
            spender: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

        "balanceOf(address)"(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

        decimals(overrides?: CallOverrides): Promise<[number]>;

        "decimals()"(overrides?: CallOverrides): Promise<[number]>;

        decreaseAllowance(
            spender: string,
            subtractedValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "decreaseAllowance(address,uint256)"(
            spender: string,
            subtractedValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        distributeTokens(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        "distributeTokens()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        increaseAllowance(
            spender: string,
            addedValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "increaseAllowance(address,uint256)"(
            spender: string,
            addedValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        locker(overrides?: CallOverrides): Promise<[string]>;

        "locker()"(overrides?: CallOverrides): Promise<[string]>;

        name(overrides?: CallOverrides): Promise<[string]>;

        "name()"(overrides?: CallOverrides): Promise<[string]>;

        owner(overrides?: CallOverrides): Promise<[string]>;

        "owner()"(overrides?: CallOverrides): Promise<[string]>;

        renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        "renounceOwnership()"(
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        setDistributionTeamsAddresses(
            _CommunityDevelopmentAddr: string,
            _StakingRewardsAddr: string,
            _LiquidityPoolAddr: string,
            _PublicSaleAddr: string,
            _AdvisorsAddr: string,
            _SeedInvestmentAddr: string,
            _PrivateSaleAddr: string,
            _TeamAllocationAddr: string,
            _StrategicRoundAddr: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "setDistributionTeamsAddresses(address,address,address,address,address,address,address,address,address)"(
            _CommunityDevelopmentAddr: string,
            _StakingRewardsAddr: string,
            _LiquidityPoolAddr: string,
            _PublicSaleAddr: string,
            _AdvisorsAddr: string,
            _SeedInvestmentAddr: string,
            _PrivateSaleAddr: string,
            _TeamAllocationAddr: string,
            _StrategicRoundAddr: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        setLocker(
            _locker: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "setLocker(address)"(
            _locker: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        setTaxExemptStatus(
            account: string,
            status: boolean,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "setTaxExemptStatus(address,bool)"(
            account: string,
            status: boolean,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        setTaxRate(
            newTaxRate: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "setTaxRate(uint256)"(
            newTaxRate: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        setTaxationWallet(
            newTaxationWallet: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "setTaxationWallet(address)"(
            newTaxationWallet: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        symbol(overrides?: CallOverrides): Promise<[string]>;

        "symbol()"(overrides?: CallOverrides): Promise<[string]>;

        taxExempt(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

        "taxExempt(address)"(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

        taxRate(overrides?: CallOverrides): Promise<[BigNumber]>;

        "taxRate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        taxationWallet(overrides?: CallOverrides): Promise<[string]>;

        "taxationWallet()"(overrides?: CallOverrides): Promise<[string]>;

        totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

        "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        transfer(
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "transfer(address,uint256)"(
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        transferFrom(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "transferFrom(address,address,uint256)"(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        transferOwnership(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "transferOwnership(address)"(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;
    };

    ADVISORS(overrides?: CallOverrides): Promise<BigNumber>;

    "ADVISORS()"(overrides?: CallOverrides): Promise<BigNumber>;

    AdvisorsAddr(overrides?: CallOverrides): Promise<string>;

    "AdvisorsAddr()"(overrides?: CallOverrides): Promise<string>;

    COMMUNITY_DEVELOPMENT(overrides?: CallOverrides): Promise<BigNumber>;

    "COMMUNITY_DEVELOPMENT()"(overrides?: CallOverrides): Promise<BigNumber>;

    CommunityDevelopmentAddr(overrides?: CallOverrides): Promise<string>;

    "CommunityDevelopmentAddr()"(overrides?: CallOverrides): Promise<string>;

    DECIMALS(overrides?: CallOverrides): Promise<number>;

    "DECIMALS()"(overrides?: CallOverrides): Promise<number>;

    INITIAL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    "INITIAL_SUPPLY()"(overrides?: CallOverrides): Promise<BigNumber>;

    LAUNCH_POOL(overrides?: CallOverrides): Promise<BigNumber>;

    "LAUNCH_POOL()"(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDITY_POOL(overrides?: CallOverrides): Promise<BigNumber>;

    "LIQUIDITY_POOL()"(overrides?: CallOverrides): Promise<BigNumber>;

    LiquidityPoolAddr(overrides?: CallOverrides): Promise<string>;

    "LiquidityPoolAddr()"(overrides?: CallOverrides): Promise<string>;

    NAME(overrides?: CallOverrides): Promise<string>;

    "NAME()"(overrides?: CallOverrides): Promise<string>;

    PRIVATE_SALE(overrides?: CallOverrides): Promise<BigNumber>;

    "PRIVATE_SALE()"(overrides?: CallOverrides): Promise<BigNumber>;

    PUBLIC_SALE(overrides?: CallOverrides): Promise<BigNumber>;

    "PUBLIC_SALE()"(overrides?: CallOverrides): Promise<BigNumber>;

    PrivateSaleAddr(overrides?: CallOverrides): Promise<string>;

    "PrivateSaleAddr()"(overrides?: CallOverrides): Promise<string>;

    PublicSaleAddr(overrides?: CallOverrides): Promise<string>;

    "PublicSaleAddr()"(overrides?: CallOverrides): Promise<string>;

    SEED_INVESTMENT(overrides?: CallOverrides): Promise<BigNumber>;

    "SEED_INVESTMENT()"(overrides?: CallOverrides): Promise<BigNumber>;

    STAKING_REWARDS(overrides?: CallOverrides): Promise<BigNumber>;

    "STAKING_REWARDS()"(overrides?: CallOverrides): Promise<BigNumber>;

    STRATEGIC_ROUND(overrides?: CallOverrides): Promise<BigNumber>;

    "STRATEGIC_ROUND()"(overrides?: CallOverrides): Promise<BigNumber>;

    SYMBOL(overrides?: CallOverrides): Promise<string>;

    "SYMBOL()"(overrides?: CallOverrides): Promise<string>;

    SeedInvestmentAddr(overrides?: CallOverrides): Promise<string>;

    "SeedInvestmentAddr()"(overrides?: CallOverrides): Promise<string>;

    StakingRewardsAddr(overrides?: CallOverrides): Promise<string>;

    "StakingRewardsAddr()"(overrides?: CallOverrides): Promise<string>;

    StrategicRoundAddr(overrides?: CallOverrides): Promise<string>;

    "StrategicRoundAddr()"(overrides?: CallOverrides): Promise<string>;

    TEAM_ALLOCATION(overrides?: CallOverrides): Promise<BigNumber>;

    "TEAM_ALLOCATION()"(overrides?: CallOverrides): Promise<BigNumber>;

    TeamAllocationAddr(overrides?: CallOverrides): Promise<string>;

    "TeamAllocationAddr()"(overrides?: CallOverrides): Promise<string>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    "allowance(address,address)"(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(
        spender: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
        spender: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
        spender: string,
        subtractedValue: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
        spender: string,
        subtractedValue: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    distributeTokens(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    "distributeTokens()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    increaseAllowance(
        spender: string,
        addedValue: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
        spender: string,
        addedValue: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    locker(overrides?: CallOverrides): Promise<string>;

    "locker()"(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setDistributionTeamsAddresses(
        _CommunityDevelopmentAddr: string,
        _StakingRewardsAddr: string,
        _LiquidityPoolAddr: string,
        _PublicSaleAddr: string,
        _AdvisorsAddr: string,
        _SeedInvestmentAddr: string,
        _PrivateSaleAddr: string,
        _TeamAllocationAddr: string,
        _StrategicRoundAddr: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "setDistributionTeamsAddresses(address,address,address,address,address,address,address,address,address)"(
        _CommunityDevelopmentAddr: string,
        _StakingRewardsAddr: string,
        _LiquidityPoolAddr: string,
        _PublicSaleAddr: string,
        _AdvisorsAddr: string,
        _SeedInvestmentAddr: string,
        _PrivateSaleAddr: string,
        _TeamAllocationAddr: string,
        _StrategicRoundAddr: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setLocker(
        _locker: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "setLocker(address)"(
        _locker: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setTaxExemptStatus(
        account: string,
        status: boolean,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "setTaxExemptStatus(address,bool)"(
        account: string,
        status: boolean,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setTaxRate(
        newTaxRate: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "setTaxRate(uint256)"(
        newTaxRate: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setTaxationWallet(
        newTaxationWallet: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "setTaxationWallet(address)"(
        newTaxationWallet: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    taxExempt(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "taxExempt(address)"(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    taxRate(overrides?: CallOverrides): Promise<BigNumber>;

    "taxRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    taxationWallet(overrides?: CallOverrides): Promise<string>;

    "taxationWallet()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
        recipient: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
        recipient: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
        sender: string,
        recipient: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
        sender: string,
        recipient: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
        newOwner: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
        newOwner: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    callStatic: {
        ADVISORS(overrides?: CallOverrides): Promise<BigNumber>;

        "ADVISORS()"(overrides?: CallOverrides): Promise<BigNumber>;

        AdvisorsAddr(overrides?: CallOverrides): Promise<string>;

        "AdvisorsAddr()"(overrides?: CallOverrides): Promise<string>;

        COMMUNITY_DEVELOPMENT(overrides?: CallOverrides): Promise<BigNumber>;

        "COMMUNITY_DEVELOPMENT()"(overrides?: CallOverrides): Promise<BigNumber>;

        CommunityDevelopmentAddr(overrides?: CallOverrides): Promise<string>;

        "CommunityDevelopmentAddr()"(overrides?: CallOverrides): Promise<string>;

        DECIMALS(overrides?: CallOverrides): Promise<number>;

        "DECIMALS()"(overrides?: CallOverrides): Promise<number>;

        INITIAL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

        "INITIAL_SUPPLY()"(overrides?: CallOverrides): Promise<BigNumber>;

        LAUNCH_POOL(overrides?: CallOverrides): Promise<BigNumber>;

        "LAUNCH_POOL()"(overrides?: CallOverrides): Promise<BigNumber>;

        LIQUIDITY_POOL(overrides?: CallOverrides): Promise<BigNumber>;

        "LIQUIDITY_POOL()"(overrides?: CallOverrides): Promise<BigNumber>;

        LiquidityPoolAddr(overrides?: CallOverrides): Promise<string>;

        "LiquidityPoolAddr()"(overrides?: CallOverrides): Promise<string>;

        NAME(overrides?: CallOverrides): Promise<string>;

        "NAME()"(overrides?: CallOverrides): Promise<string>;

        PRIVATE_SALE(overrides?: CallOverrides): Promise<BigNumber>;

        "PRIVATE_SALE()"(overrides?: CallOverrides): Promise<BigNumber>;

        PUBLIC_SALE(overrides?: CallOverrides): Promise<BigNumber>;

        "PUBLIC_SALE()"(overrides?: CallOverrides): Promise<BigNumber>;

        PrivateSaleAddr(overrides?: CallOverrides): Promise<string>;

        "PrivateSaleAddr()"(overrides?: CallOverrides): Promise<string>;

        PublicSaleAddr(overrides?: CallOverrides): Promise<string>;

        "PublicSaleAddr()"(overrides?: CallOverrides): Promise<string>;

        SEED_INVESTMENT(overrides?: CallOverrides): Promise<BigNumber>;

        "SEED_INVESTMENT()"(overrides?: CallOverrides): Promise<BigNumber>;

        STAKING_REWARDS(overrides?: CallOverrides): Promise<BigNumber>;

        "STAKING_REWARDS()"(overrides?: CallOverrides): Promise<BigNumber>;

        STRATEGIC_ROUND(overrides?: CallOverrides): Promise<BigNumber>;

        "STRATEGIC_ROUND()"(overrides?: CallOverrides): Promise<BigNumber>;

        SYMBOL(overrides?: CallOverrides): Promise<string>;

        "SYMBOL()"(overrides?: CallOverrides): Promise<string>;

        SeedInvestmentAddr(overrides?: CallOverrides): Promise<string>;

        "SeedInvestmentAddr()"(overrides?: CallOverrides): Promise<string>;

        StakingRewardsAddr(overrides?: CallOverrides): Promise<string>;

        "StakingRewardsAddr()"(overrides?: CallOverrides): Promise<string>;

        StrategicRoundAddr(overrides?: CallOverrides): Promise<string>;

        "StrategicRoundAddr()"(overrides?: CallOverrides): Promise<string>;

        TEAM_ALLOCATION(overrides?: CallOverrides): Promise<BigNumber>;

        "TEAM_ALLOCATION()"(overrides?: CallOverrides): Promise<BigNumber>;

        TeamAllocationAddr(overrides?: CallOverrides): Promise<string>;

        "TeamAllocationAddr()"(overrides?: CallOverrides): Promise<string>;

        allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

        "allowance(address,address)"(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

        approve(spender: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

        "approve(address,uint256)"(spender: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

        balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

        "balanceOf(address)"(account: string, overrides?: CallOverrides): Promise<BigNumber>;

        decimals(overrides?: CallOverrides): Promise<number>;

        "decimals()"(overrides?: CallOverrides): Promise<number>;

        decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

        "decreaseAllowance(address,uint256)"(
            spender: string,
            subtractedValue: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<boolean>;

        distributeTokens(overrides?: CallOverrides): Promise<void>;

        "distributeTokens()"(overrides?: CallOverrides): Promise<void>;

        increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

        "increaseAllowance(address,uint256)"(
            spender: string,
            addedValue: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<boolean>;

        locker(overrides?: CallOverrides): Promise<string>;

        "locker()"(overrides?: CallOverrides): Promise<string>;

        name(overrides?: CallOverrides): Promise<string>;

        "name()"(overrides?: CallOverrides): Promise<string>;

        owner(overrides?: CallOverrides): Promise<string>;

        "owner()"(overrides?: CallOverrides): Promise<string>;

        renounceOwnership(overrides?: CallOverrides): Promise<void>;

        "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

        setDistributionTeamsAddresses(
            _CommunityDevelopmentAddr: string,
            _StakingRewardsAddr: string,
            _LiquidityPoolAddr: string,
            _PublicSaleAddr: string,
            _AdvisorsAddr: string,
            _SeedInvestmentAddr: string,
            _PrivateSaleAddr: string,
            _TeamAllocationAddr: string,
            _StrategicRoundAddr: string,
            overrides?: CallOverrides,
        ): Promise<void>;

        "setDistributionTeamsAddresses(address,address,address,address,address,address,address,address,address)"(
            _CommunityDevelopmentAddr: string,
            _StakingRewardsAddr: string,
            _LiquidityPoolAddr: string,
            _PublicSaleAddr: string,
            _AdvisorsAddr: string,
            _SeedInvestmentAddr: string,
            _PrivateSaleAddr: string,
            _TeamAllocationAddr: string,
            _StrategicRoundAddr: string,
            overrides?: CallOverrides,
        ): Promise<void>;

        setLocker(_locker: string, overrides?: CallOverrides): Promise<void>;

        "setLocker(address)"(_locker: string, overrides?: CallOverrides): Promise<void>;

        setTaxExemptStatus(account: string, status: boolean, overrides?: CallOverrides): Promise<void>;

        "setTaxExemptStatus(address,bool)"(account: string, status: boolean, overrides?: CallOverrides): Promise<void>;

        setTaxRate(newTaxRate: BigNumberish, overrides?: CallOverrides): Promise<void>;

        "setTaxRate(uint256)"(newTaxRate: BigNumberish, overrides?: CallOverrides): Promise<void>;

        setTaxationWallet(newTaxationWallet: string, overrides?: CallOverrides): Promise<void>;

        "setTaxationWallet(address)"(newTaxationWallet: string, overrides?: CallOverrides): Promise<void>;

        symbol(overrides?: CallOverrides): Promise<string>;

        "symbol()"(overrides?: CallOverrides): Promise<string>;

        taxExempt(arg0: string, overrides?: CallOverrides): Promise<boolean>;

        "taxExempt(address)"(arg0: string, overrides?: CallOverrides): Promise<boolean>;

        taxRate(overrides?: CallOverrides): Promise<BigNumber>;

        "taxRate()"(overrides?: CallOverrides): Promise<BigNumber>;

        taxationWallet(overrides?: CallOverrides): Promise<string>;

        "taxationWallet()"(overrides?: CallOverrides): Promise<string>;

        totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

        "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

        transfer(recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

        "transfer(address,uint256)"(
            recipient: string,
            amount: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<boolean>;

        transferFrom(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<boolean>;

        "transferFrom(address,address,uint256)"(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<boolean>;

        transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

        "transferOwnership(address)"(newOwner: string, overrides?: CallOverrides): Promise<void>;
    };

    filters: {
        Approval(
            owner: string | null,
            spender: string | null,
            value: null,
        ): TypedEventFilter<[string, string, BigNumber], { owner: string; spender: string; value: BigNumber }>;

        OwnershipTransferred(
            previousOwner: string | null,
            newOwner: string | null,
        ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>;

        SetLocker(locker: string | null): TypedEventFilter<[string], { locker: string }>;

        Transfer(
            from: string | null,
            to: string | null,
            value: null,
        ): TypedEventFilter<[string, string, BigNumber], { from: string; to: string; value: BigNumber }>;
    };

    estimateGas: {
        ADVISORS(overrides?: CallOverrides): Promise<BigNumber>;

        "ADVISORS()"(overrides?: CallOverrides): Promise<BigNumber>;

        AdvisorsAddr(overrides?: CallOverrides): Promise<BigNumber>;

        "AdvisorsAddr()"(overrides?: CallOverrides): Promise<BigNumber>;

        COMMUNITY_DEVELOPMENT(overrides?: CallOverrides): Promise<BigNumber>;

        "COMMUNITY_DEVELOPMENT()"(overrides?: CallOverrides): Promise<BigNumber>;

        CommunityDevelopmentAddr(overrides?: CallOverrides): Promise<BigNumber>;

        "CommunityDevelopmentAddr()"(overrides?: CallOverrides): Promise<BigNumber>;

        DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

        "DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

        INITIAL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

        "INITIAL_SUPPLY()"(overrides?: CallOverrides): Promise<BigNumber>;

        LAUNCH_POOL(overrides?: CallOverrides): Promise<BigNumber>;

        "LAUNCH_POOL()"(overrides?: CallOverrides): Promise<BigNumber>;

        LIQUIDITY_POOL(overrides?: CallOverrides): Promise<BigNumber>;

        "LIQUIDITY_POOL()"(overrides?: CallOverrides): Promise<BigNumber>;

        LiquidityPoolAddr(overrides?: CallOverrides): Promise<BigNumber>;

        "LiquidityPoolAddr()"(overrides?: CallOverrides): Promise<BigNumber>;

        NAME(overrides?: CallOverrides): Promise<BigNumber>;

        "NAME()"(overrides?: CallOverrides): Promise<BigNumber>;

        PRIVATE_SALE(overrides?: CallOverrides): Promise<BigNumber>;

        "PRIVATE_SALE()"(overrides?: CallOverrides): Promise<BigNumber>;

        PUBLIC_SALE(overrides?: CallOverrides): Promise<BigNumber>;

        "PUBLIC_SALE()"(overrides?: CallOverrides): Promise<BigNumber>;

        PrivateSaleAddr(overrides?: CallOverrides): Promise<BigNumber>;

        "PrivateSaleAddr()"(overrides?: CallOverrides): Promise<BigNumber>;

        PublicSaleAddr(overrides?: CallOverrides): Promise<BigNumber>;

        "PublicSaleAddr()"(overrides?: CallOverrides): Promise<BigNumber>;

        SEED_INVESTMENT(overrides?: CallOverrides): Promise<BigNumber>;

        "SEED_INVESTMENT()"(overrides?: CallOverrides): Promise<BigNumber>;

        STAKING_REWARDS(overrides?: CallOverrides): Promise<BigNumber>;

        "STAKING_REWARDS()"(overrides?: CallOverrides): Promise<BigNumber>;

        STRATEGIC_ROUND(overrides?: CallOverrides): Promise<BigNumber>;

        "STRATEGIC_ROUND()"(overrides?: CallOverrides): Promise<BigNumber>;

        SYMBOL(overrides?: CallOverrides): Promise<BigNumber>;

        "SYMBOL()"(overrides?: CallOverrides): Promise<BigNumber>;

        SeedInvestmentAddr(overrides?: CallOverrides): Promise<BigNumber>;

        "SeedInvestmentAddr()"(overrides?: CallOverrides): Promise<BigNumber>;

        StakingRewardsAddr(overrides?: CallOverrides): Promise<BigNumber>;

        "StakingRewardsAddr()"(overrides?: CallOverrides): Promise<BigNumber>;

        StrategicRoundAddr(overrides?: CallOverrides): Promise<BigNumber>;

        "StrategicRoundAddr()"(overrides?: CallOverrides): Promise<BigNumber>;

        TEAM_ALLOCATION(overrides?: CallOverrides): Promise<BigNumber>;

        "TEAM_ALLOCATION()"(overrides?: CallOverrides): Promise<BigNumber>;

        TeamAllocationAddr(overrides?: CallOverrides): Promise<BigNumber>;

        "TeamAllocationAddr()"(overrides?: CallOverrides): Promise<BigNumber>;

        allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

        "allowance(address,address)"(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

        approve(
            spender: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "approve(address,uint256)"(
            spender: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

        "balanceOf(address)"(account: string, overrides?: CallOverrides): Promise<BigNumber>;

        decimals(overrides?: CallOverrides): Promise<BigNumber>;

        "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

        decreaseAllowance(
            spender: string,
            subtractedValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "decreaseAllowance(address,uint256)"(
            spender: string,
            subtractedValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        distributeTokens(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        "distributeTokens()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        increaseAllowance(
            spender: string,
            addedValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "increaseAllowance(address,uint256)"(
            spender: string,
            addedValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        locker(overrides?: CallOverrides): Promise<BigNumber>;

        "locker()"(overrides?: CallOverrides): Promise<BigNumber>;

        name(overrides?: CallOverrides): Promise<BigNumber>;

        "name()"(overrides?: CallOverrides): Promise<BigNumber>;

        owner(overrides?: CallOverrides): Promise<BigNumber>;

        "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

        renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        "renounceOwnership()"(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        setDistributionTeamsAddresses(
            _CommunityDevelopmentAddr: string,
            _StakingRewardsAddr: string,
            _LiquidityPoolAddr: string,
            _PublicSaleAddr: string,
            _AdvisorsAddr: string,
            _SeedInvestmentAddr: string,
            _PrivateSaleAddr: string,
            _TeamAllocationAddr: string,
            _StrategicRoundAddr: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "setDistributionTeamsAddresses(address,address,address,address,address,address,address,address,address)"(
            _CommunityDevelopmentAddr: string,
            _StakingRewardsAddr: string,
            _LiquidityPoolAddr: string,
            _PublicSaleAddr: string,
            _AdvisorsAddr: string,
            _SeedInvestmentAddr: string,
            _PrivateSaleAddr: string,
            _TeamAllocationAddr: string,
            _StrategicRoundAddr: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        setLocker(_locker: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        "setLocker(address)"(
            _locker: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        setTaxExemptStatus(
            account: string,
            status: boolean,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "setTaxExemptStatus(address,bool)"(
            account: string,
            status: boolean,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        setTaxRate(
            newTaxRate: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "setTaxRate(uint256)"(
            newTaxRate: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        setTaxationWallet(
            newTaxationWallet: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "setTaxationWallet(address)"(
            newTaxationWallet: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        symbol(overrides?: CallOverrides): Promise<BigNumber>;

        "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

        taxExempt(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

        "taxExempt(address)"(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

        taxRate(overrides?: CallOverrides): Promise<BigNumber>;

        "taxRate()"(overrides?: CallOverrides): Promise<BigNumber>;

        taxationWallet(overrides?: CallOverrides): Promise<BigNumber>;

        "taxationWallet()"(overrides?: CallOverrides): Promise<BigNumber>;

        totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

        "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

        transfer(
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "transfer(address,uint256)"(
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        transferFrom(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "transferFrom(address,address,uint256)"(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        transferOwnership(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "transferOwnership(address)"(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        ADVISORS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "ADVISORS()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        AdvisorsAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "AdvisorsAddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        COMMUNITY_DEVELOPMENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "COMMUNITY_DEVELOPMENT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        CommunityDevelopmentAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "CommunityDevelopmentAddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "DECIMALS()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        INITIAL_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "INITIAL_SUPPLY()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        LAUNCH_POOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "LAUNCH_POOL()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        LIQUIDITY_POOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "LIQUIDITY_POOL()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        LiquidityPoolAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "LiquidityPoolAddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "NAME()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        PRIVATE_SALE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "PRIVATE_SALE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        PUBLIC_SALE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "PUBLIC_SALE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        PrivateSaleAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "PrivateSaleAddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        PublicSaleAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "PublicSaleAddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        SEED_INVESTMENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "SEED_INVESTMENT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        STAKING_REWARDS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "STAKING_REWARDS()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        STRATEGIC_ROUND(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "STRATEGIC_ROUND()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        SYMBOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "SYMBOL()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        SeedInvestmentAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "SeedInvestmentAddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        StakingRewardsAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "StakingRewardsAddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        StrategicRoundAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "StrategicRoundAddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        TEAM_ALLOCATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "TEAM_ALLOCATION()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        TeamAllocationAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "TeamAllocationAddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "allowance(address,address)"(
            owner: string,
            spender: string,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        approve(
            spender: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "approve(address,uint256)"(
            spender: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        balanceOf(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "balanceOf(address)"(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        decreaseAllowance(
            spender: string,
            subtractedValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "decreaseAllowance(address,uint256)"(
            spender: string,
            subtractedValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        distributeTokens(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        "distributeTokens()"(
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        increaseAllowance(
            spender: string,
            addedValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "increaseAllowance(address,uint256)"(
            spender: string,
            addedValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        locker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "locker()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        "renounceOwnership()"(
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        setDistributionTeamsAddresses(
            _CommunityDevelopmentAddr: string,
            _StakingRewardsAddr: string,
            _LiquidityPoolAddr: string,
            _PublicSaleAddr: string,
            _AdvisorsAddr: string,
            _SeedInvestmentAddr: string,
            _PrivateSaleAddr: string,
            _TeamAllocationAddr: string,
            _StrategicRoundAddr: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "setDistributionTeamsAddresses(address,address,address,address,address,address,address,address,address)"(
            _CommunityDevelopmentAddr: string,
            _StakingRewardsAddr: string,
            _LiquidityPoolAddr: string,
            _PublicSaleAddr: string,
            _AdvisorsAddr: string,
            _SeedInvestmentAddr: string,
            _PrivateSaleAddr: string,
            _TeamAllocationAddr: string,
            _StrategicRoundAddr: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        setLocker(
            _locker: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "setLocker(address)"(
            _locker: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        setTaxExemptStatus(
            account: string,
            status: boolean,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "setTaxExemptStatus(address,bool)"(
            account: string,
            status: boolean,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        setTaxRate(
            newTaxRate: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "setTaxRate(uint256)"(
            newTaxRate: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        setTaxationWallet(
            newTaxationWallet: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "setTaxationWallet(address)"(
            newTaxationWallet: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        taxExempt(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "taxExempt(address)"(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        taxRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "taxRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        taxationWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "taxationWallet()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        transfer(
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "transfer(address,uint256)"(
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        transferFrom(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "transferFrom(address,address,uint256)"(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        transferOwnership(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "transferOwnership(address)"(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;
    };
}
